= Spacetime

== Mileage

*Bob*: Yesterday you mentioned that you could see mileage in taking
a more abstract, four-dimensional perspective on the N-body problem.

*Alice*: And you looked skeptical.

*Bob*: Because I am.  What can be the mileage in such a shift, given
that we are not dealing with relativistic velocities?

*Alice*: For one thing, a spacetime view puts our discussion of
restarting a run from an output file in a clearer perspective.  If we
create a new class +Worldline+ for each worldline, we can rename our
current class +Body+ to +Worldpoint+ and instead of +NBody+ we can
talk about +World+, in order to point to the whole system.

For quite a while, I've been unhappy with the big gap between the
bottom-level +Body+ objects and the whole +NBody+ system, as a single
top-level objects.  With a +Worldline+ class in between, we can
separate many issues in a more fine-grained way.

Look at it this way.  If you start in four dimensions, identities of
objects are related to worldlines, while specific values of positions
and velocities are related to worldpoints.  But as soon as you project
that spacetime view into a single space view, you wind up with point
particles that have position and velocity and identity, and these three
all look the same: the original distinction between lines and points is
lost.

In the three dimensional view, we are dealing with moving particles.
Each particle has an identity that has to be carried with it while its
position and velocity are changing.  And with individual time steps,
it becomes rather complicated and potentially very confusing, to keep
track of which particle is where at what time, and to make sure that
particles interact with each other in the right way.

*Bob*: Can you be more concrete?

*Alice*: In your individual time step code <tt>nbody_ind1.rb</tt>,
the main engine +evolve+ has to juggle the regular phase of evolving
particles with the occasional interruptions of output demand, which
require synchronizing all particles.  As we have seen, this means that
a change in diagnostics frequency has physical repercussions: it means
that our particles will be forced to move on slightly different orbits.

This is a Bad Thing.

It would be _much_ better to implement a form of diagnostics reporting
that is totally decoupled from the way particles move.  If we can make
orbit integration and diagnostics reporting truly modular, without the
one influencing the other, I would be much happier.

== Eras and Snapshots

*Bob*: And introducing the concept of a +Worldline+ could do that, you think?

*Alice*: I think so.  We could leave all diagnostics, together with all
other output issues to the top level +World+ class.  The evolution could
take place at a lower level.

*Bob*: At the +Worldline+ level?

*Alice*: No, a +Worldline+ class contains only information about a single
particle.  We need yet again something intermediate, this time in between
+Worldline+ and +World+.  Something like a block of time during which all
particles can move forward without worrying about output issues.  If we
save all the information about all steps that are taking during this time,
in other words if we save all +Worldpoint+ information, we can then deal
with output issues at the end of that block of time.

*Bob*: Putting a +Worldblock+ class in between +World+ and +Worldpoint+?

*Alice*: Yes, but we need a better name.  How about a period?

*Bob*: A dynasty?

*Alice*: Effectively, yes.  It is rather recent that people are counting
time in terms of a universal and continuous year count.  Most cultures
used to talk in terms of the fourth year of the reign of king so-and-so.

*Bob*: But +Worlddynasty+ doesn't roll of the tongue.

*Alice*: How about calling it an era?  That's about the shortest term
I can think of.

*Bob*: Can't make it much shorter.  A +Worldera+ class?

*Alice*: That sounds better already.  So instead of dealing with two
levels, of +Body+ and +NBody+ we will now have four levels: +Worldpoint+,
+Worldline+, +Worldera+, and finally just +World+.

*Bob*: But what about output?  I don't see any natural place yet to synchronize
particles in this hierarchy.

*Alice*: Good point.  The four world-related classes are all intrinsically
temporal constructs.  We need a separate class for spatial information.
This class should contain the results of taking a hypersurface cut through
a bunch of worldlines.

*Bob*: You mean, the result of taking a snapshot of the system?

*Alice*: Yes, that's a good name!  Let's call it a +Worldsnapshot+ class.
By using the word `world' everywhere, we make it clear that we're dealing
with a coherent system of concepts.

*Bob*: Before you introduce even more classes, shall we start with a toy
code, to see whether your grand vision makes any sense, in practice?

*Alice*: I'd love to!  It shouldn't be too hard to rewrite your
<tt>nbody_ind1.rb</tt> into +World+ form.

*Bob*: I'm not at all convinced that going from two to five classes
will simplify life, but I must admit, your ideas sound intriguing enough
to try it out.

Before getting started, let's make sure this time that we obey Ruby's
convention of using MixedCaseNotation from the beginning: let's call
our classes +World+, +WorldSnapshot+, +WorldEra+, +WorldLine+, and
+WorldPoint+.

*Alice*: MyPleasure.

== Intermezzo

From this point on, Alice and Bob spent quite a bit of time coding up
an individual time step algorithm, using their five new classes.  As
one can imagine, they ran into all kinds of problems, and went through
many a debug session.  Finally, after several days, it all worked.  We
will join them now, while they look at their first finished product,
in file <tt>world1.rb</tt>.  This will be the first of a series of such
implementations, and the detailed layout will change quite a bit.
However, the current code contains all the basic ingredients for a
worldline-based N-body code.

*Bob*: That was quite a lot of work.  The new file <tt>world1.rb</tt>
is a complete overhaul of what we had in <tt>nbody_ind1.rb</tt>.
It is twice a long, too.

*Alice*: But it is a lot more structured, and I'm sure it will be much
easier to extend to more complicated situations.  Besides, it has
significantly more functionality.

*Bob*: Before we congratulate ourselves too much, we should make sure
that we get the same answers as before.  Let us apply our standard test
again, using the by now familiar initial conditions for our 5-particle
system:

 :commandoutput: mkplummer.rb -n 5 -s 1 | acsnumber.rb > test.in

Here is our comparison run for the older code:

 :commandoutput: nbody_ind1.rb -t 1 -d 0.001 < test.in > tmpi.out

And here is what our new code gives:

 :commandoutput: world1.rb -t 1 -c 0.001 < test.in > tmpw.out

Aha, at least the number of time steps is very similar, and so is the
total energy error.  Here is the distance in phase space

 :commandoutput: cat tmpi.out tmpw.out | newacsdiff.rb

*Alice*: Almost too good to be true!  really close to round-off.
You know, I'd feel more comfortable if we would redo the run with
somewhat lower accuracy, just to check whether the phase space
distance will become larger.

*Bob*: Why not.  When we take time steps that are ten times longer, we get:

 :commandoutput: nbody_ind1.rb -t 1 -d 0.01 < test.in > tmpi.out

An increase in error of a factor 10,000, roughly; so we were just far
enough away from the round-off barrier, and we still have a nicely
fourth-order behavior for our Hermite scheme.  I bet the new code will
show a similar error:

 :commandoutput: world1.rb -t 1 -c 0.01 < test.in > tmpw.out

*Alice*: And so it does.  So this suggests that the phase space difference
should also be about 10,000 times larger.

 :commandoutput: cat tmpi.out tmpw.out | newacsdiff.rb

*Bob*: Which is indeed the case.  Okay, we seem to have done something right.

