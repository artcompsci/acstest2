= A Multi-Step Method

== xxx

xxx

Taylor series:

:equation:
\ba \,=\, \ba_0 + \bj_0 t + \hhalf \bs_0 t^2
+ \one{6} \bc_0 t^3 + O(t^4)

For the three previous times:

:eqnarray:
\label{threea}
\ba_{-1} \,&=&\,
\ba_0 - \bj_0 \Delta t + \hhalf \bs_0 (\Delta t)^2
- \one{6} \bc_0 (\Delta t)^3                        \nonumber\\
\ba_{-2} \,&=&\,
\ba_0 - 2\bj_0 \Delta t + 2 \bs_0 (\Delta t)^2
 - {\textstyle\frac{4}{3}} \bc_0 (\Delta t)^3       \nonumber\\
\ba_{-3} \,&=&\,
\ba_0 - 3\bj_0 \Delta t + {\textstyle\frac{9}{2}} \bs_0 (\Delta t)^2
 - {\textstyle\frac{9}{2}} \bc_0 (\Delta t)^3

From Eq. (ref(threea)):

:eqnarray:
\label{twoa}
2\ba_{-1} - \ba_{-2} \,&=&\,
\ba_0 -  \bs_0 (\Delta t)^2 + \bc_0 (\Delta t)^3       \nonumber\\
3\ba_{-1} - \ba_{-3} \,&=&\,
2\ba_0 -  3\bs_0 (\Delta t)^2 + 4\bc_0 (\Delta t)^3

Now eliminate <tex>$\bs_0$</tex> :

<tex>$$
3\left( 2\ba_{-1} - \ba_{-2} \right) - \left( 3\ba_{-1} - \ba_{-3} \right)
\,=\, \ba_0 -  \bc_0 (\Delta t)^3   \,\,\,\,\Rightarrow
$$</tex>

<tex>$$
3\ba_{-1} - 3\ba_{-2} +  \ba_{-3}
\,=\, \ba_0 -  \bc_0 (\Delta t)^3   \,\,\,\,\Rightarrow
$$</tex>

:equation:
\label{bc}
\bc_0 \,=\, {1\over (\Delta t)^3}\left\{
\ba_0 -3\ba_{-1} + 3\ba_{-2} - \ba_{-3}
\right\}

Now substitute Eq. (ref(bc)) in the top line of Eq. (ref(twoa)) :

:eqnarray:
\bs_0(\Delta t)^2 \,&=&\, 
-2\ba_{-1} + \ba_{-2} + \ba_0 + \bc_0 (\Delta t)^3 \nonumber\\
&=&\,
-2\ba_{-1} + \ba_{-2} + \ba_0 + 
\left\{
\ba_0 -3\ba_{-1} + 3\ba_{-2} - \ba_{-3}
\right\}\,\,\,\,\Rightarrow \nonumber

:equation:
\label{bs}
\bs_0 \,=\, {1\over (\Delta t)^2}\left\{
2\ba_0 -5\ba_{-1} + 4\ba_{-2} - \ba_{-3}
\right\}

Now substitute Eqs. (ref(bc)) and (ref(bs)) in the top line of
Eq. (ref(threea)) :

:eqnarray:
\bj_0 \Delta t \,\,\,=\,\,\, -\ba_1 \,\,+\,\, \ba_0 &+&
\hhalf \bs_0(\Delta t)^2 -\one{6} \bc_0(\Delta t)^3          \nonumber\\
-\ba_1 \,\,+\,\, \ba_0 &+&
\left\{
\ba_0 -{\textstyle\frac{5}{2}}\ba_{-1} + 2\ba_{-2} - \hhalf\ba_{-3}
\right\}             \nonumber\\
&+&
\left\{
-\one{6}\ba_0 +\hhalf\ba_{-1} -\hhalf\ba_{-2} +\one{6} \ba_{-3}
\right\}\,\,\,\,\Rightarrow           \nonumber

:equation:
\label{bj}
\bj_0 \,=\, {1\over \Delta t}\left\{
{\textstyle\frac{11}{6}}\ba_0 -3\ba_{-1} + \three{2}\ba_{-2} - \one{3}\ba_{-3}
\right\}

Now check whether we did not make a mistake:

:eqnarray:
&&\ba_0 - \bj_0 \Delta t + \hhalf\bs_0 (\Delta t)^2
- \one{6} \bc_0 (\Delta t)^3 \,\,=                                  \nonumber\\
&&                                                                  \nonumber\\
&&\,\,\,\,\,\,+\ba_0                                                \nonumber\\
&&-{\textstyle\frac{11}{6}}\ba_0 +3\ba_{-1} - \three{2}\ba_{-2}
  + \one{3}\ba_{-3}                                                 \nonumber\\
&&\,\,\,\,\,\, +\ba_0
  -{\textstyle\frac{5}{2}}\ba_{-1} + 2\ba_{-2} -\hhalf\ba_{-3}\nonumber\\
&&\,\,-\one{6}\ba_0 +\hhalf\ba_{-1}
  -\hhalf\ba_{-2} +\one{6}\ba_{-3}\,\,\,=\,\,\, \ba_{-1}         \nonumber

:eqnarray:
&&\ba_0 - 2\bj_0 \Delta t + 2 \bs_0 (\Delta t)^2
 - {\textstyle\frac{4}{3}} \bc_0 (\Delta t)^3\,\,=                  \nonumber\\
&&                                                                  \nonumber\\
&&\,\,\,\,\,\,+\ba_0                                       \nonumber\\
&&-{\textstyle\frac{11}{3}}\ba_0 \,+\,6\ba_{-1} - 3\ba_{-2}
  + {\textstyle\frac{2}{3}}\ba_{-3}                                 \nonumber\\
&&\,\,\, +4\ba_0
  -10\ba_{-1} + 8\ba_{-2} -2\ba_{-3}\nonumber\\
&&\,\,-{\textstyle\frac{4}{3}}\ba_0 \,\,+\,4\ba_{-1}
  -4\ba_{-2} +{\textstyle\frac{4}{3}}\ba_{-3}\,\,\,=\,\,\, \ba_{-2}  \nonumber

:eqnarray:
&&\ba_0 - 3\bj_0 \Delta t + {\textstyle\frac{9}{2}} \bs_0 (\Delta t)^2
 - {\textstyle\frac{9}{2}} \bc_0 (\Delta t)^3\,\,=                  \nonumber\\
&&                                                                  \nonumber\\
&&\,\,\,\,\,\,\,\,\,\,\,\ba_0                                       \nonumber\\
&&-{\textstyle\frac{11}{2}}\ba_0 \,\,+\,\,9\ba_{-1}
 \,-\, {\textstyle\frac{9}{2}}\ba_{-2}
  \,+\,\ba_{-3}                                                    \nonumber\\
&&\,\,\,\, +9\ba_0
  -{\textstyle\frac{45}{2}}\ba_{-1} + 18\ba_{-2}
  -{\textstyle\frac{9}{2}}\ba_{-3}\nonumber\\
&&\,\,\,-{\textstyle\frac{9}{2}}\ba_0 +{\textstyle\frac{27}{2}}\ba_{-1}
  -{\textstyle\frac{27}{2}}\ba_{-2} +{\textstyle\frac{9}{2}}\ba_{-3}
  \,\,\,=\,\,\, \ba_{-3}  \nonumber


Then <tt>ms4body.rb</tt>.

Ah, already using "/" method from <tt>vector.rb</tt>

 :commandoutput: ruby integrator_driver4d.rb < euler.in

 :commandoutput: ruby integrator_driver4e.rb < euler.in

Not completely clear; let's try a factor 2

 :commandoutput: ruby integrator_driver4f.rb < euler.in

Ah, now a factor of almost 16.  Great!

== xxx

Bob: if I were to do this for 6th order, I would definitely
use a symbolic integrator; (actually use Mathematica and show it here??)
When I saw you struggling with all those substitutions when we tracked
the fourth-order nature of the Runge-Kutta integrator, I was already
wondering whether we shouldn't use a symbolic integration package.
At that point I didn't bring it up, since we were in the middle of
trying to figure out how things worked in the first place, and
introducing yet another tool might have been confusing.  But now that
the procedure is crystal clear, we are just faced with solving a
large number of linear equations with the same number of unknowns,
and that is really not something I want to do by hand; not would I
learn must from doing so.

Now for 6th order:

 :commandoutput: ruby integrator_driver4g.rb < euler.in

Let's be bold and try:

 :commandoutput: ruby integrator_driver4h.rb < euler.in

Hey, that is _very_ strange!  Errors are getting better?!?

CHECK THIS AGAIN!  I CHANGED <tt>yo6.rk</tt> to <tt>yo8.rk</tt> !!!!

A factor two larger time step:

 :commandoutput: ruby integrator_driver4i.rb < euler.in

A factor of about 60: hence really 6th order

Hey, wait!  We've only tested yo6, so far!  We have to do many more steps.

 :commandoutput: ruby integrator_driver4j.rb < euler.in

Ah, Yoshida's integrator is great, yappari.  Ten times shorter time step:

 :commandoutput: ruby integrator_driver4k.rb < euler.in

Looks like 6th order.  Two times longer:

 :commandoutput: ruby integrator_driver4l.rb < euler.in

Great!  Close to factor 64, and now really with the multi-step integrator.

== xxx

Now for eighth order:

Fortunately, we do have Yoshida's 8th-order integrator, to start our code
up with.

 :commandoutput: ruby integrator_driver4m.rb < euler.in

two times smaller time step:

 :commandoutput: ruby integrator_driver4n.rb < euler.in

getting closer to a factor 256, but not there yet.

two times smaller time step:

 :commandoutput: ruby integrator_driver4o.rb < euler.in

Closer!  Certainly closer to 256 than 128.  I think we can declare victory.


