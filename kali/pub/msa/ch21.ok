= Scaling of Energy Errors

== A Matter of Time

*Carol*: So now we have seen how we are making a really big error,
when we use forward Euler with a time step that is really too
large for a first-order integration scheme.  But that's not what
we are really interested in.  We want to study the behavior of
errors in the case where the time steps are small enough to give
reasonable orbit pictures.

*Erica*: Yes, and then we want to compare first-order and second-order
integration schemes, to check whether the energy errors scale in
different ways.  First we should continue to look at forward Euler,
but with smaller time steps.

*Dan*: You know, I really get tired of writing a whole new file, each
time we change a parameter, like the size of a time step.  Can't we
let the program ask for the time step size, so that we can type it in
while the program is running?

*Carol*: Good idea.  That is a much cleaner approach.  And while we're
at it, why not ask for the total duration of the integration too.
And that reminds me, I really wasn't very happy with the way we have
forced the code to give sparse output, at every interval of
<tt>\Delta t = 0.01</tt>.

*Dan*: Remind me, what did we do there?

*Carol*: Take file <tt>euler_elliptic_100000_steps_sparse_ok.rb</tt>

*Dan*: Ah, yes, of course, how can I forget such a name!

*Carol*: Well, as the name says, that code took 100,000 steps, during
a total time of 10 time units.  With output intervals of length 0.01,
this means that we needed only 1,000 outputs.  In other words, we
needed only to print the results once every 100 steps.  We did this
with the following rather clumsy trick, using the remainder operator
<tt>%</tt>:

 :inccode: .euler_elliptic_100000_steps_sparse_ok.rb-2

I suggest that instead we introduce the time explicitly.  Notice
that so far we have used a variable +dt+ to keep the value of the
time step size, but we have never kept track of the time itself.
Let us introduce a variable +t+ to indicate the time that has
passed since the start of the integration.  We can then specify
a desired interval between outputs, <tt>dt_out</tt> for short.
And to keep track of when the next output is scheduled to happen,
we can use a variable <tt>t_out</tt>.  Whenever the time +t+ reaches
<tt>t_out</tt> or goes past it, we need to do another output.

Of course, our diagnostics method should now print the value of the
time as well.  What else do we need to change.  The main loop now
becomes a test to see whether the time +t+ has passed to or beyond
the final time <tt>t_end</tt>, specified by the user.  And after each
output statement, <tt>t_out</tt> has to be incremented to the next
scheduled output time, by adding <tt>dt_out</tt> to its value.
Well, that must be about it, yes?

== A New Control Structure

Let me open a file <tt>euler_energy_try4.rb</tt> and type it all in:

 :inccode: .euler_energy_try4.rb

*Dan*: What is +gets+?

*Carol*: That is a Ruby input statement, short for `get string'.
It reads the next line from the command line.  So if you type
a single value, and then hit the enter key, +gets+ gobbles up
the number you have typed, but packaged as a string.  For example,
when the code asks you for a time step, and you type

 0.01

then +gets+ returns the string <tt>"0.01"</tt>, made up of four characters.
What we really want is a number, and the method <tt>to_f</tt> is the
built-in Ruby way to convert a string into a floating point number;
it is short for `(convert) to float'.

== Overshooting

*Erica*: Let's give it the same values as before, to see whether we get
the same output.

*Carol*: This is what we found before:

 :commandoutput: ruby euler_energy_try3.rb > euler_energy_try3.out

And let us see what our new program gives:

 :commandinputoutput: ruby euler_energy_try4.rb > euler_energy_try4.out END
0.01
10
END

*Dan*: At least the diagnostics output is the same.  How about the
output files?

*Carol*: I'll do a +diff+:

 :commandoutput: diff euler_energy_try3.out euler_energy_try4.out

He, that is strange.  Our friend +diff+ claims that the two files
are identical except for the fact that our latest code produces one
more line of output!  Let me check it with a word count:

 :commandoutput: wc euler_energy_try[34].out

And what do you know, yes, 1001 lines in <tt>euler_energy_try3.out</tt>
as it should be, moving from times 0 till 10 with steps of 0.01, but
why does <tt>euler_energy_try4.out</tt> have 1002 lines??

*Erica*: That last program must be taking one more step, beyond time 10.
Can you show the last few lines for both output files?

*Carol*: Sure:

 :commandoutput: tail -3 euler_energy_try3.out
 :commandoutput: tail -3 euler_energy_try4.out

Just like +diff+ told us, the last few lines are identical, except for
the fact that <tt>euler_energy_try4.out</tt> shows one extra step.  You
must be right: it looks like the code didn't know how to stop in time.

== Knowing When To Stop

*Erica*: I wonder why it overshot.

*Carol*: Let me put some debug statements in there, for now, just to
see what the code thinks it is doing, toward the end.  Right at the
beginning of the loop, after the +while+ line, I'll ask for the two
time values to be printed out, the running time +t+ and the end time
<tt>t_end</tt>, in file <tt>euler_energy_try5.rb</tt>:

 :inccode: .euler_energy_try5.rb-1

Here we go:

 :commandinputoutput: ruby euler_energy_try5.rb > euler_energy_try5.out END
0.01
10
END
 :commandoutput: tail euler_energy_try5.out

*Erica*: Aha!  The problem is roundoff, that explains everything!
The time variable +t+ is a floating point variable, and instead
of reaching the exact time 10, after 1,000 steps, it comes ever
so close, but not quite at the right point.  Therefore, when it
runs the loop test, it decides that the time has to be incremented
by another time step, and it then overshoots.

*Carol*: That suggests a simple solution.  How about testing whether
the time has reached not exactly the end time, but close enough?
Close enough could mean half a time step.  Let's try!  And I'll be
bold and call the next file <tt>euler_energy.rb</tt>, in the hope
we now get it right.  I will write the loop continuation test like
this:

 :inccode: .euler_energy.rb-1

That should do it:

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.01
10
END
 :commandoutput: diff euler_energy_try3.out euler_energy.out

*Dan*: And it did it.  No differences.  Congratulations!

*Carol*: Let me be double sure:

 :commandoutput: tail -1 euler_energy_try3.out
 :commandoutput: tail -1 euler_energy.out

Good.  So now we have a new tool, allowing us to change two parameters,
without having to change the source code each time.  Progress!

== Linear Scaling

*Dan*: Now the point of all this was to check whether the energy errors
in forward Euler scale linearly with the time step size.  Let's try a
few values.

*Carol*: Sure thing.  And now that we can control both the time step
and the duration of the integration, let's speed things up a bit, and
integrate for only 0.1 time unit.  Starting with the previous time step
we get:

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.01
0.1
END

Making the time step ten times shorter, we find:

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.001
0.1
END

And making it yet ten times shorter gives:

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.0001
0.1
END

*Dan*: Pretty linear, all right.

*Carol*: Let's jump to a hundred times smaller time step, to see whether
the error still becomes a hundred times smaller:

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.000001
0.1
END

*Dan*: And so it does.

== Picture Time

*Erica*: I'd like to see how the energy error behaves in time, over a
few full orbits, and with better accuracy.

*Carol*: Okay, I'll take ten time units again for the total orbit
integration, and a time step of 0.0001.  Just to remind us of what
the orbit looked like, I'll plot it again, in fig ref(euler_energy_out).

 :commandinputoutput: ruby euler_energy.rb > euler_energy.out END
0.0001
10
END

 :commandinput: gnuplot END
set term post eps
set output "euler_energy_out.ps"
set size ratio -1
plot "euler_energy.out" using 1:2
quit
END

:figure: euler_energy_out.ps 10cm euler_energy_out
Trajectory of a more accurate forward Euler integration,
with <tex>$dt = 0.0001$</tex>.

*Erica*: Ah, yes, that time step was just about short enough to begin
to see the intended orbit, without too much drift.

*Carol*: And here is how the error grows, as a function of time,
in fig ref(euler_energy_err).

 :commandinput: gnuplot END
set term post eps
set output "euler_energy_err.ps"
set size ratio -1
plot "euler_energy.out" using 0:7
quit
END

:figure: euler_energy_err.ps 10cm euler_energy_err
Energy error growth for a more accurate forward Euler integration,
with <tex>$dt = 0.0001$</tex>.

*Erica*: Even though the orbit behaves a lot better now, it is clear
that the energy errors are still being generated mostly around
pericenter passage.  In between those close encounters, the energy is
very well conserved.  But whenever the two stars swing around each
other, the energy drifts in a systematic and cumulative way.

*Dan*: Yes, dramatically so!  I can see why people like to use
individual time steps.  If you use thrown in a few more time steps
during close encounters, you can get very much more accuracy as a
return for investing very little extra computer time.

