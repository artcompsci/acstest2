\header Fri Nov 14 16:12:15 JST 2003 Jun Makino Session No. = 2003-11-11-001

2003, November 11, Tuesday, Kyoto: Jun and Piet

1. Kali Code

We met in Tokyo, took the shinkansen to Kyoto, and spent the afternoon
there at the Yukawa Institute.  Before meeting, we had already decided
to work on the Kali code.  In June, we had spent two weeks drawing up
rough specifications for the major modules of the Kali code and their
interfaces.  However, we did not have the time then to describe the
detailed considerations that led to our decisions, and we also did not
specify the interfaces in detail, on the byte level.

1.1. Interface Specifications

We decided to start with the latter task, since solving that would
also help us to solve the first task: while specifying the interfaces
in precise detail, we can simultaneously document the movitation and
considerations that went into the decisions made.

1.1.1 Two options

We thought about two options for specifying the interface between two
modules:

1) to use an object oriented model.  This implies, for example, that
   we have to specify accessor functions to obtain and modify data and
   methods for a given objects.  There are three ways to do so: at
   compile time, at link time, or at execution time.

2) to completely specify the data passed across the interface on the
   byte level.

The first solution is more elegant, but the main drawback is that it
will tie you to a particular language.  Therefore, we chose the second
option.

1.1.2. A Toy Model

The next question was where to start.  Rather than jumping in to
describe the whole Kali structure, we decided to start with a toy
model, based on the "nbody_sh1.C" code, the shared timestep Hermite
code introduced in our book "Moving Stars Around".  First we will
generalize it to include individual time steps, "nbody_ind1.C", and
then we will separate the code into different modules, the integrator,
the force calculator, and the scheduler, as well as modules for I/O
and such.  For this toy model, we will define the interfaces between
these modules in a precise way.  Next we will implement versions of
each module in C++, Fortran, and Ruby.  We can then test the
interfaces by combining different modules, written in different
languages, into one code, to see whether the various combinations
behave in the same way (the detailed results may be different because
of different roundoff, when numerical operations are done in different
order).

2. File structure

Before beginning to work on our toy model, we had to decide how we
wanted to structure the files that contain the source for our book
series.  So far, we have produced a single volume, "Moving Stars
Around", by writing the text in LaTeX, keep each C++ program in a
separate file, and managing everything under CVS in a directory
structure in which each chapter had a separate directory with the C++
code corresponding to that chapter.

2.1. Problems with the Existing Approach

We had created a mechanism to automatically include the programs and
program fragments into the right places in our book. This was
important, to guarantee that the latest version of each program would
actually appear in the latest version of the book.  However, we
found that there were still several unsatisfactory aspects to this
system:

1) it was easy to make a change in a program, while forgetting to
   update all the places in the text that referred to that program;

2) although we tried to document what we did from day to day in a
   separate lab notes file, we often neglected to update that file,
   which made it almost impossible to reconstruct what we did and why
   we did it, a few months later.

3) while working on our book, we often came up with all kind of
   interesting ideas, for which we sometimes made notes here and
   there, but we did not have a good mechanism to store those ideas in
   a consistent format.  As a result, most of those ideas were lost again.

In addition, we had stumbled on a different type of problem as well:

4) having written our book text in LaTeX, it turned out to be far from
   trivial to produce HTML files, besides the standard postcript and
   pdf files.

After some discussion, we decided to try a completely new approach,
for writing our subsequent volumes.  And since we had just decided to
work on a toy model to test interfaces, we concluded that we might as
well use that toy model also as a test case for this new approach of
better integrating the various files that contain book, code, and lab
notes.

2.2. Two Files, Four Functions

So we have four functions, for the material that we want to produce
while writing our books: the book text, the computer programs, the log
with a description of the day-to-day history, and a mechanism to
collect ideas.  The first two, book and programs, grow like an animal,
where different parts transform internally during the growth.  The
second two, log and ideas, grow more like a plant, with more and more
stuff added as we go along.

We call the collection of text files for the book and the computer
programs together the `source', while we call the collection of log
notes and ideas the `lab notes'.

2.3. Source

In order to prevent problem 1) listed above, we decided to try what
Donald Knuth has called "literate programming", in which book text and
code text are written together, interspersed in the same source file.
Special programs are used to extract the book text and the computer
codes from this common source.  Only the source is meant to be edited.
In this way, the chance for a mismatch between code and text is
minimized.

In order to address problem 4) we decided to switch from LaTeX to XML,
using docbook to make it easy to produce both postscript and HTML pages.
Unfortunately, mathematical equations are not very well supported yet
under XML.  While MathML exists, it is still not very well developed.
So we decided to continue using LaTeX for our equations, and to write
some automatic mechanism to create individual postscript files for the
individual equations.

We are not yet sure how to merge text and code into one source file.
Perhaps we will write our own system, using Ruby.  Before before
making a decision, we would like to hear what others have to say.
We will ask Erik Ray and Norm Walsh for advice.

2.4. Lab Notes

2.4.1. Open Source

It would be good to make our lab notes openly available, in the spirit
of open source, so that anyone interested can not only read our books
and run our programs, but also inspect the whole process that led to
the writing of books and programs, as well as the ideas that popped up
as part of the process.  In a way, all of this is a collection of
different layers of documentation for the source code.

You start with the source code.  There are inline comments to explain
some statements in a microscopic ways.  There are blocks of comments
included in the code to give more macroscopic descriptions of how the
code hangs together.  All three, code statements, shorter and longer
comments can be found in the code source files.

The fourth level of documentation is the book text.  The fifth level
is given by the lab notes that in turn document the process of writing
the book text, as a history of what happened.

In addition, there is yet another, quite different, level: in the lab
we want to add new ideas, when we think about them, even if they are
not immediately connected with the problem at hand.

2.4.2. Presentation

In order to make our lab notes publicly available, we will create a
top HTML page with a one-line entry for each month, which you can
click on in order to access a lower-level HTML page that lists all
sessions that took place during that month.  Clicking on that session
will then direct you to the actual lab notes for that session.  These
lab notes will be presented in a separate file for each month.  We
will use the "name=" mechanism in html to jump to the correct place
inside such a file to, to go to a particular session.

Within each session, we present the history of what we did in that
session and why.  In addition, we will create separate boxes for ideas
that popped up during that session.

\fig{labnote.eps, 15 cm}

2.4.3. Generation of Lab Notes

In order for us to make it easy to write the lab notes for a new
session and add them to the existing HTML files, we will automatize
the process of lab note generation.  Rather than writing a separate
HTML file, which is rather cumbersome, we will introduce a special
file format, with a set of rules for how to automatically transform
that format to HTML.

Each time one of us submits a session, our new software will
automatically add that session to the growing list of sessions, in
HTML form.  The sessions will be added in the order received.

Before submitting your session, you may want to view it in HTML mode,
to check whether things really come out as you intended.  For that
purpose, the software will have a "local" mode, to create a single
stand-alone HTML file for your session.  The "global" mode, in
contrast, will add your session once and for all to the growing
repository of sessions.  If you later want to make changes, you have
to describes those in a later session, and point to the older session.

Finally, we will allow the inclusion of figures and LaTeX equations.
The images for the figures will be automatically copied to the proper
place so that they can be accessed by the HTML files that will include
them.  For the specific case of LaTeX equations that will be turned
into figures, we will create a special file with LaTeX definitions.

3. Notes about Notes for this Session

3.1. Why they were written later

The notes for this session, on November 11, 2003, were actually
written the next day, on November 12, 2003.  The reason was that,
although we finished our first outline of the lab note system on
11/11, we had not quite decided upon a format for writing an
individual session.  The next day, we began the process of making the
necessary decisions, and then we could at least start writing these
notes in a format that will soon grow into our new standard.  For
example, we decided to start with a description of date and place and
persons, and then gave the subsequent information in hierarchical
blocks of sections, subsections, subsubsections, etc.

3.2. How they were written

3.2.1. Our First Attempt

This afternoon of the next day, when we started to write these notes,
we first tried to make a coherent story, by adding here and there some
extra insights that we got today to the descriptions of the topics
addressed yesterday.  However, this quickly got out of hand, and we
realized that we were adding whole chunks of new insights, while
projecting that incorrectly back onto what we did yesterday.

3.2.2. Corrections

We then decided to be more honest, and transfer the new insights to
the lab notes of today, i.e. the next day.  After that, we again went
through the whole session, to restore each section and subsection, etc.,
to what we actually discussed yesterday.

3.3. What we Learned

All this was a wonderful exercise in showing the use of documentation.
By forcing ourselves to spell out what we did, how we did it, and why
we did it, we discovered a large number of places where we had not
been consistent enough, or had not gone far enough.  All kind of new
ideas came up, which we then began to implement right away.  If we had
been less careful about documentation, we would not have noticed all
these potential improvements, and our system would have been less
rich and much less robust.

3.4. Self Referencing

We also saw the power of self-referential systems.  We were bootstrapping
ourselves, using our lab note mechanism to describe our invention of our
lab note mechanism.  It was a bit like writing a C compiler in C, and
finding out that there is only a tiny kernel that you have to write in
assembly language.  In our case, it was more extreme: it was like
inventing a language in the process of writing a compiler in that
language, and thus seeing the limitations of each construction {\it both}
and {\it simultaneously} on the level of what the construction expressed,
and how it was actually implemented.


\header Fri Nov 14 16:12:15 JST 2003 Jun Makino Session No. = 2003-11-12-001

2003, November 12, Wednesday, Kyoto: Jun and Piet

1. Source

Piet wrote the following email to Erik Raymond, asking him some more
questions about the use of XML, and also asking him for an introduction
to Norm Walsh:

\begincode

Date: Tue, 11 Nov 2003 20:20:03 -0500
From: Piet Hut <piet@ias.edu>
To: eray@ravelgrane.com
CC: makino@astron.s.u-tokyo.ac.jp
Subject: Re: XML and moving stars around

Hi Erik:

Greetings from Japan, where I just arrived, for a two-months stay in Kyoto.
Part of this time I'll be working with my collaborator, Jun Makino, so now
we're in a position to take up where we left off, at the end of September.

> I converted chapter one into DocBook-XML as a test before tackling 
> chapter 3. Here's the result so far:
> 
>    http://www.ravelgrane.com/ER/doc/ex/

Thank you again!  Jun and I decided to go for the docbook approach
that you showed us in this example.

> I am running an XSLT transform on the XML file "book.xml" which is in 
> that directory. This file sources in ch01.xml using an external entity 
> (an XML mechanism for importing files). I wrote the XSLT stylesheet and 
> it is easy to modify the appearance in HTML.
> 
> I have another XSLT stylesheet somewhere for creating PDF. Later I will 
> dig it up and show you how you can generate PDF from the same XML files 
> using a tool called "fop".

Did you get a chance to dig this up?  Sounds like a nice tool!

> No equations in this chapter, so it was pretty easy. The next step is 
> to integrate MathML. I don't have support for it in my stylesheets yet. 
> If they are very complex, we may need to think about turning them into 
> graphics, because there is not very good support for MathML in 
> browsers. For PDF, it will be easier, because there are MathML 
> stylesheets available and XSL is a much richer formatting language than 
> HTML.

For now, indeed it strikes us as the best approach to go for graphics.
This probably means doing a LaTeX pass and then produce little ps files
for each equation, right?  As long as MathML remains in its currently
unsupported state, we might just as well write the equations directly
into LaTeX, with which we are already familiar.

By the way, Jun and I have also been thinking more about the so-called
"literate programming" approach, writing book text and computer code
together in one file, which makes it much less likely that the two get
out of sinc during revisions.  This then needs some automatic process
to get the book and the code extracted from the common source.  As I
mentioned a while ago, we were fascinated by the description given by
Norm Walsh, on his web site:

   "http://nwalsh.com/docs/articles/xml2002/lp/paper.html"

You responded to my previous mentioning of this:

> THis is funny, because I have worked with Norm before and he is the 
> worst at documenting his code. Love him dearly though.

We would like to send him an email to see whether he may be interested
in giving some advice (and on the off chance that he, too, might be
curious about the gravitational N-body problem).  Would you mind sending
him a short email with CC to us, to introduce us to him, so that he
knows we are serious (and basically good folks ;>) ?

Thanks a lot!

Piet

\endcode

2. Version Control

Yesterday we outlined a plan to maintain two places where we
accumulate files, `source' and `lab notes'.  The source files will be
written in a literate programming style, while the lab notes will form
a type of journal or diary.  For the lab notes, the notes from each new
session will be added to the end.  The software we need to automate
that process will be written by us later this week.  For the source,
we need some form of version control.

2.1. Subversion

Our first thought was to use CVS, the version control program that is
most widely in use.  But then Jun remembered having heard about a new
system, Subversion, that has an interface similar to that of CVS, but
has eliminated many annoying limitations of CVS.  We looked at the
documentation and decided to try it out for our toy project.

In fact, our toy project now serves many functions: 1) originally,
i.e. yesterday morning, we proposed it in order to try out our new
style of interface specification; 2) then, yesterday afternoon, we
proposed using it to try out our new lab note writing system; 3)
finally, today we decided to use it to also test our new version
control system.

2.2. Setting up a Repository

Jun spent a couple hours to understand and install subversion on both
of our computers.  We then set up a subversion repository on his
computer in Tokyo, and we both checked out a version, even though the
repository at that moment was still empty.  As our first file, we
began to write the labnotes for the previous day, named "labnotes031111".

That previous day, we had decided to write automated software that
will convert the lab notes for a session to the HTML version.
However, at that time we had not yet thought through what exactly we
wanted to translate automatically in what way.  As a consequence, we
had only a vague idea of what the such lab session notes would look
like.  This was the main reason that we did not take notes that day,
and postponed the note taking to today.

3. Lab Notes File Format

3.1. Headers and Paragraphs

Having our new subversion system in place, we thus started to write
"labnotes031111".  We began by writing text, but quickly we found that
it would be nice to add a fine grained level of sections, subsections,
etc.  This in turn gave us the idea to define a specific file format,
starting with a one line header containing time, place, and persons,
followed by a ([sub]*)section tree.  A blank line indicates a new
paragraph, as in LaTeX.

Here is a possible syntax.  Two blank lines will be translated into
paragraph breaks, and a single line starting with a number will be
interpreted as a header for a section or subsection.  If you really
want to write a paragraph containing only one short sentence starting
with a number, you will have to add a backslash: "\8" at the start of
a one-line paragraph will be interpreted as "8", while "\\8" will be
interpreted as "\8", for those rare one-line paragraphs that really
want to start with a backslash followed by a character 8.

3.2. Suffix

We gave this format a name: a file in this format will end with the
suffix ".not", short for "notes" as in "lab notes".

3.3. Including Figures

We decided to copy the figure that we had drawn on the blackboard, and
Jun redrew it, using the program {\tt tgif}.  In order to include that
figure in our lab notes for yesterday's session, we had to define a
syntax for figure inclusion.  We decided that it would be of the type
"\\fig{filename, size}", written on a separate line, with blank lines
before and after.  For example, yesterday's figure was included using
the following line:

\\fig{labnote.eps, 15 cm}

3.4. Italic, Boldface, Colors, and all that

We will define a limited number of text formatting, to indicate for
example the use of italic or boldface text, the use of different
colors, and so on.  We will allow a few different ways to define those
formatting options.  For example, an equal space typewriter font could
be defined as \begintt \\begintt tgif \\endtt \endtt in LaTeX style,
or as <tt> \<tt\> tgif \</tt\> </tt>.

4. Lab Notes File Types

4.1. Different .html Options

Yesterday we decided to concatenate all lab sessions' notes, after
translating them into HTML, into one long separate file for each month.
Today, however, we realized that it would be better to give the user
the choice to either create long files, one for each months, or short
files, one for each session.

4.2. From .html to .pdf Files

Yesterday, we thought about an automated translation process from our
own session note taking format to HTML.  Our idea was to make web
pages the designated output format for our notes.  Today, however, we
realized that it would be nice to produce pdf files as well.  For one
thing, it would make it much easier to print out individual sessions.

4.3. Preserving the Original .not Files

Then we thought about possible future extensions.  Who knows what
other files types we would like to use as targets.  This prompted us
to make sure to keep copies of our session notes in their original form.

4.4. Uploading .not Sessions

One allowed option would be for each of us to write a new .not file
for each session.  The automated software would then simply append
that session's file to the mother .not file.  Another option would be
for each of us to keep a complete copy of the mother file, and write
the new session's lab notes at the end of the file.  The automated
software would then recognize which part to take from the end, and to
append that to the mother file.  And finally, it should also be okay
to take an intermediary approach, to keep for example a file with the
last few dozen sessions, and write the new session's note at the end
of that file.

4.5. Warnings and Errors

When uploading a new lab session, the automated software will flag
differences between older sessions in one of our personal copies of
the lab notes and the lab note mother file.  In that case, a warning
will be issued, as long as the new session can be cleanly appended to
the end of the mother file.  Seeing such a warning will inform the
person doing the update that there is something corrupted in his own
copy of the lab notes.  However, if the latest lab session does not
appear at the very end of the personal copy of the lab notes, an error
will be issued, since in that case it is not possible to decide what
went wrong and how it could possible be corrected automatically.

5. Generation of Lab Notes

We extended our ideas about generation of labnotes \ref 2003-11-11-1-2.4.3.
to include not only the automatic generation of HTML files, but also
the generation of pdf files.  In addition, we will keep a mother file
that contains all submissions of .not files in chronological order.
Other options would be to translate the .not files into LaTeX files,
and to translate them into XML files as well (which in turn can then
be translated into LaTeX or HTML or pdf files).

We will allow errata and general comments to point back to a previous
session, which will then automatically add a pointer to the previous
session, pointing to the erratum text.  However, that last pointer
will not appear inside the text of that previous session, which can no
longer be changed, but rather at the top or bottom of that session, as
a form of metadata.

Finally, as we decided yesterday, we will allow the inclusion of
figures and LaTeX equations.  The images for the figures will be
automatically copied to the proper place so that they can be accessed
by the HTML files that will include them.  For the specific case of
LaTeX equations that will be turned into figures, we will create a
special file "notdefs.tex".

6. Todo List

We made the following todo list:

-- finish writing yesterday's lab notes
-- implement block timestep code
-- write a Ruby implementation of our lab note mechanism
-- implement docbook XML version of our (book and code) source
-- work on a paper for the Kali code, using the block time step code
     as a toy model


\header Fri Nov 14 16:12:15 JST 2003 Jun Makino Session No. = 2003-11-13-001

2003, November 13, Thursday, Kyoto: Jun and Piet

1. Yesterday's Lab Notes

We finished writing yesterday's lab notes.  Now that we have decided
upon a format and mechanism, we will try to finish each set of notes
on the day the work described is done.

2. Todo List

We discussed various ways to automate the updating of our todo list.
One option is to include a current version at the end of our local
file, in which we write our session reports.  In that case we could
simply synchronize our todo list by hand.  Another option is to create
a separate todo file and put that under svn; however, chances are that
we then never look at it.

3. Remaining Work for This Week

We decided to write a minimum version of whatever software is needed
to make it possible to put at least some material on our ACS web site,
both the labnotes of the last few days, and a beginning of volume 4,
which could describe the labnote mechanism.

4. Open Kitchen

On our ACS web site, we will add a clickable line, called {\it open kitchen},
which contains in a publicly visible way our ongoing labnotes and
latest drafts of our various volumes.  This will make it much easier
to communicate with others; when asking for comments and suggestions,
we can simply point them to the appropriate descriptions in our book
manuscripts and labnotes.




