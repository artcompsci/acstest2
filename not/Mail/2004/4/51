Date: Fri Apr 09 10:53:33 JST 2004

From: Jun Makino <makino@astron.s.u-tokyo.ac.jp>

Hi Piet,

 > Since we are now in different places again, I send this to the ACS "not" 
 > email address, so that we can find this information back in our lab notes.

Okay.

 > -- He thought that there was too much talk about Ruby, and that it
 >    took too long to get to the first integrator.  In contrast, he
 >    liked the fact that in Moving Stars Around (MSA) we start very
 >    quickly with the first forward Euler integrator.
 > 
 > I can see his point, but everything is a tradeoff.  Yes, it is nice to
 > have a working program quickly, but I told him that we have the following
 > reasons NOT to do that: 1) while he could learn C++ from just looking
 > at MSA, he is very unusual in picking things up quickly; most students
 > need far more introduction, so I disagree that there is too much Ruby;
 > 2) while it is nice to have a clear simple example early on, it is not
 > realistic to think that two researchers can write that immediately from
 > scratch -- our whole approach is trying to be realistic, not idealized.

For my Akagi book, major complaints are that it started too high level
too quickly, without much explanation on C++ or integration schemes. I
agree with you that Douglas is a very exceptional reader...

 > -- For Fortran 77 readers, like he himself, he thought that many of
 >    the Ruby advantages that were mentioned in volume 1 seem less so.
 >    I asked about using vector notation, and he admitted that that was
 >    a clear Ruby advantage over Fortran.  I guess he mentioned the stuff
 >    about I/O and lack of having to specify types and such.  He said
 >    "for Fortran 77 people, this discussion will not ring true".
 > 
 > I'm not sure what we can do here.  Since you know Fortran better than
 > I do, perhaps you can look through the text quickly, and find a few
 > places where I can let Bob say "but in Fortran . . ." and then Alice
 > reminds him that in Ruby you have objects, so soon we will be able to
 > pass particles around as variables, which you can't do in Fortran.

I guess this is a point we discussed earlier. I'll take a look.
 > 
 > -- When I asked about the debugging chapters, and explained that that
 >    was meant also as teaching students HOW to debug, he was surprised,
 >    and had not thought about that; he had seen it as purely directed
 >    toward explaining issues in Ruby, not meta issues about approach to
 >    debugging in general.  But after I mentioned that, he could see the
 >    advantage.
 > 
 > I guess it is a bit like the Scheme book by Sussman and Abelson, who
 > really teach how to think about programming, and just happen to use
 > Scheme.  I am not sure whether we should add something to the text.
 > Perhaps I can let Alice point out how useful this exercise was, also
 > as an example for the students?  I thought I did that already, but
 > perhaps we should be more explicit.  Or shall we just leave it as it
 > is?

Here again, it may be becuase Douglas is an exceptional reader. If the
content is very natural to him, that is probably because he would follow
similar course himself anyway.

One possibility would be to add something like a summary of what the
readers are supposed to learn, at the end of each chapter, with single
sentence for each topic. 

 > -- Douglas suggested to add exercises early on, as we started to do in
 >    MSA as well.  That way, students can get their hands dirty right away.
 > 
 > I told him that we plan to do that.  I can try.  I am not so sure how
 > easy it will be, but of course you can always ask the students to make
 > some variations on what is discussed in the text.  The only drawback
 > is that in that way it may seem even longer before the text finally
 > presents an integrator . . .

Many lazy readers skip exercises anyway. So the length is I think
okay.

 > -- When Douglas mentioned again the desirability of a clean working
 >    integrator earlier on, I said that one option would be to present
 >    a C++ version of a forward Euler, as in MSA, quickly, and then let
 >    A & B figure out how to translate that in Ruby.
 > 
 > That is possible, and I think we have thought about it before, but I
 > don't really like it.  There is no reason to let students who know
 > only Fortran (or C/C++) to learn C/C++ (or Fortran) if we go to Ruby
 > anyway.  Besides, an early example like in MSA would invite graphics,
 > which we decided to postpone to volume 2.

Well, if book 2 is ready, quick readers can proceed directly to it. So
I *think* current style is okay. As we discussed earlier, we can
provide the "guided tour" or recommended or suggested order of
reading, depending on  readers' background.

 > -- I mentioned to Douglas as a possibility that we could introduce
 >    shortcuts: telling the reader at various places how they can jump
 >    forwards to find the first Ruby integrator, for example, if they
 >    already know Ruby, or are impatient to go through the whole
 >    discussion.
 > 
 > In order to do that, we have to decide how exactly we want to do
 > forward and backward referencing, and *especially* how to guarantee
 > that those pointers will all be updated, when we change something
 > somewhere.

Okay, to add some referencing scheme is easy (actually one is hidden
in HTML generator version right now). To make them consistent, after,
say, you changed the name of the section, filename etc, is much
harder, but if we have latex generator, we can relay on latex to do
the consistenct check. So I think it's not too bad.

We need to agree on the method to do reference, though.

 > -- finally, more as a matter of interest in Ruby programming, Douglas
 >    asked whether we couldn't start playing with Ruby.  He was puzzled
 >    at first, he said, that we put the propagator inside the Body class
 >    definition, but then he realized that this means that you can
 >    implement a type of message passing algorithm, letting one body
 >    propagate itself, by asking other particles what their predicted
 >    positions are; and if other particles don't know yet, that request
 >    will trigger other particles to step forward, asking other particles,
 >    and so on.  In other words, he wanted to do individual time steps,
 >    but without central scheduler.
 > 
 > I told him I'd be more than happy to start playing with Ruby that way.
 > I hope we'll get a chance, just to get a flavor.  The problem is that
 > we only have 24 hours left together here in Strasbourg!  Let's see
 > what we come up with.  I'm not exactly sure that having a propagator
 > inside a Body class is so important for his message passing idea, but
 > if that is what inspired him, that is fine of course.  I told him that
 > we have been talking about these things for years, but never got to
 > the point of implementing them, not even as a toy model, and that this
 > is something we would like Murat to look at too.

Sounds interesting....

Jun

