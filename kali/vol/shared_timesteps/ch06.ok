= Reproducibility Gained

== Asynchronicity

*Alice*: We have seen that constant time steps allow you to stop and 
restart, and to get exactly the same results as you would have gotten,
had you done one single integration from being to end.  But when we
tried to do the same thing with adaptive, shared time steps, we found
that we could not reproduce the same orbits.

*Bob*: And we knew why.  In fact, we had predicted that we couldn't.

*Alice*: Yes.  Now the question is: can we regain our reproducibility?

*Bob*: How?

*Alice*: What did _not_ work was to force an output at exactly the right
time.  That had the side effect of forcing the last step to be smaller
than it would have otherwise been.

However, there is an alternative.  How about letting the system overshoot,
so that it can do an output a time it is happy with.  When we then restart
the system, the integration should happen just like it would have otherwise.

*Bob*: I see what you mean.  Well, let's test it!

*Alice*: Here is what we did before, but this time without the
<tt>--exact_time</tt> option:

 :commandoutput: ruby nbody_sh1.rb -t 1 < test.in > test01n.out
 :commandoutput: ruby nbody_sh1.rb -t 1 < test01n.out > test12n.out
 :commandoutput: ruby nbody_sh1.rb -t 2 -o 2 < test.in > test02n.out

*Bob*: So you think we'll get a smaller distance now?

*Alice*: As close to zero as we can!  

*Bob*: Well, let's hope for the best:

 :commandoutput: cat test12n.out test02n.out | ruby nbody_diff.rb

== Overshooting

*Alice*: Hmmm, that's not good at all.  What did we do to deserve that!

*Bob*: If we look at the diagnostics output, we see that we needed the same
number of steps to reach time 1, exactly 1263 in each case.  Then in
the continued run, we took another 669 steps.  This gives us a total
number of 1932 steps.  Aha!  That is _not_ the number of steps that
the second run took.

*Alice*: Good catch!  The second run stopped too early.  And yes, of course,
we could have noticed that directly, had we looked at the final time: the
second run indeed shows an earlier ending time than the first one.

*Bob*: And that makes sense, too: we ask each run to go fro one or two time
units, or slightly more if they overshoot.  Now asking a code to overshoot
twice in a row is likely to produce a larger overshoot than doing it
only once.

*Alice*: Again, you must be right.  Going from time 0 to 1, with an
overshoot, and then adding one more time unit plus a new overshoot is
_not_ the same as going from 0 to 2 immediately, with whatever overshoot
that gives.

*Bob*: Well, shall we try to let the long run proceed a little further,
to match up with the previous one?

*Alice*: You can certainly try.  So this means adding the difference
of the two ending times to the desired duration; or in fact slightly
less, since we'll produce an overshoot anyway.

*Bob*: Okay, how about this:

 :commandoutput: ruby nbody_sh1.rb -t 2.0037 -o 2.0037 < test.in > test02n.out
 :commandoutput: cat test12n.out test02n.out | ruby nbody_diff.rb

== Living in a Logical World

*Alice*: The right distance, this time, namely zero.  Perfect!

*Bob*: It literally couldn't have been better.

*Alice*: Wait, wait: we still have only 1927 steps, and we still stop at
too early a time.  What is going on?  According to the diagnostics, nothing
has changed from the previous run.

*Bob*: Now _that_ is strange.  Obviously, the phase space distance is zero.
So something has changed.  Yet I see your point.  This is a real paradox.

*Alice*: What could possibly be . . . .

*Bob*: . . .  Ahaha!  Of course!  We changed the ending time and output
time, by a slight amount, but we did not change the diagnostics output
time!

*Alice*: Of course, of course!  Ah, that is a relief.  Good!  Mystery solved,
hopefully.  You'd better check, though!

*Bob*: Okay, here we go again:

 :commandoutput: ruby nbody_sh1.rb -t 2.0037 -d 2.0037 -o 2.0037 < test.in > test02n.out
 :commandoutput: cat test12n.out test02n.out | ruby nbody_diff.rb

*Alice*: All is well.

*Bob*: How easy to get confused!

*Alice*: And how nice to be reassured, afterwards, that the world is still
logical, after all.

== An ACS <tt>tail</tt> Version

*Bob*: You know, there is a better solution for the problem we encountered,
when we had to deal with an output file that had more than one
snapshot in it.

*Alice*: You mean in the case in which we ran a code for two time steps,
but we had forgotten that we get by default an output at every time step,
so that when we looked at the start of the file, we found the output for
time 1, rather than for time 2?

*Bob*: Yes, that was the problem.  I'm sure we'll run into this again,
often, and what we really need is a tool that picks up the _last_ ACS
object from a file, not the first one.  Normally, if you open a file
and start reading, you would read in the first ACS file first, but
instead, we need to do something like what in Unix the command +tail+
does, showing the end of a file.

*Alice*: The Unix command +tail+ has a default of showing you ten lines,
but you can ask it to show more or fewer lines, with the option <tt>-n</tt>
as in:

 :commandoutput: tail -n 3 test02n.out

which shows the last three lines.

*Bob*: Okay, let us call the file <tt>acstail.rb</tt>.  How about this?

 :inccode: ../acs_data_format/.acstail.rb

== Testing <tt>tail</tt>

*Alice*: Looks fine to me.  How about doing our previous experiment, 
without adjusting the output frequency, and using <tt>acstail.rb</tt>
instead?

*Bob*: Good idea!  Here you go.  Let's be systematic.  We know that this
works:

 :commandoutput: ruby nbody_cst1.rb -t 2 -o 2 < test.in > test02.out
 :commandoutput: cat test12.out test02.out | ruby nbody_diff.rb

and we also know that this doesn't work:

 :commandoutput: ruby nbody_cst1.rb -t 2 < test.in > test02.out
 :commandoutput: cat test12.out test02.out | ruby nbody_diff.rb

And if all is well, our new tool should be able to repair the last
problem, as follows:

 :commandoutput: ruby nbody_cst1.rb -t 2 < test.in | ruby acstail.rb > test02.out
 :commandoutput: cat test12.out test02.out | ruby nbody_diff.rb

*Alice*: Well done!
