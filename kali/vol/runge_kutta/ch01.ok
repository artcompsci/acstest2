= Introduction

== Old Abstract

We present a pedagogic overview of the freedom one has in choosing the
coefficients in explicit Runge-Kutta integration schemes.  We limit
ourselves to the simple cases in which there are at most two `force'
evaluations of the right-hand side of the differential equation per
time step.  We start with first-order differential equations, to
explain the general procedures, but then we specially to a special
case of second-order differential equations, the one that occurs in
classical mechanics, where the forces are dependent only on positions,
and independent of the velocities.  In that case we derive some of the
classical <tex>Runge-Kutta-Nystr\"om</tex> schemes, and
generalize this to include a first evaluation that does not take place
at the beginning of a time step.  We show how such a generalized
approach naturally leads us to the
<tex>leapfrog-Verlet-St\"ormer-Delambre</tex>
scheme, as a particular form of a generalized explicit Runge-Kutta
scheme.

We extend our treatment to answer the question under which circumstances
force calculations can be recycled from one step to the next, using
the so-called FSAL (first same as last) procedure.  We also analyse a
variant on two force evaluations per time step, in which one
evaluation is that of the force, and the other evaluation pertains to
the derivative of the force.  This will lead us to the Hermite scheme,
used widely in collisional stellar dynamics.  Finally, we discuss the
use of explicity multi-step explicit methods, in which force evaluations
of multiple previous steps are remembered and used again to determine
the next step to higher orders of accuracy.

[we can also allow a position expression of one order higher than the
velocity.  This won't improve the global order, but can it make the
coefficient smaller, in position and/or total energy.  If force
evaluations are extremely expensive, it may well pay to have this
additional accuracy essentially for free, as long as it doesn't
disturbe something else, such as time symmetry.  Perhaps also:
implicit schemes?]

== Notation

For the simplest form of differential equation, we will use the
notation:

:equation:
{dx \over dt} = f(x)

where we will call the variable <tex>$x$</tex> the position and the variable <tex>$t$</tex>
the time.  The solution of this equation is given by <tex>$x(t)$</tex>.  When we
solve this equation numerically, we use a finite time step <tex>$\tau$</tex>.
For now, we will analyze the properties of the first time step.  We
choose <tex>$t=0$</tex> at the beginning of the first time step, and we denote
the positions at the beginning and end of the first time step by <tex>$x_0$</tex>
and <tex>$x_1$</tex>, respectively:

:equation:
x_0 \equiv x(0) \ \ \ \ \ ; \ \ \ \ x_1 \equiv x(\tau)

We also introduce the notation:

:equation:
\dot x \equiv {dx \over dt} \equiv {d \over dt}x(t)

:equation:
f' \equiv {df \over dx} \equiv {d \over dx}f(x)
This leads to:

:equation:
\dot f \equiv {d \over dt}f(x(t)) = {dx \over dt} f' = \dot x f'

For the higher derivatives of the position, we introduce the
historical notation in terms of velocity, acceleration, jerk,
snap, crackle and pop, respectively:

:equation:
\left\{ \begin{array}{lcl}
v \equiv \dot x = {d \over dt}x(t)     &;&
a \equiv \dot v = {d^2 \over dt^2}x(t)   \quad ; \quad
j \equiv \dot a = {d^3 \over dt^3}x(t)   \\
\phantom{1}&\phantom{1}&\phantom{1} \\
s \equiv \dot j = {d^4 \over dt^4}x(t)   &;&
c \equiv \dot s = {d^5 \over dt^5}x(t)   \quad ; \quad
p \equiv \dot c = {d^6 \over dt^6}x(t)
\end{array} \right.

These expressions are especially useful for the following type of
second-order differential equation encountered in classical mechanics:

:equation:
\ddot x \equiv {d^2x \over dt^2} = f(x)

which can be written as a system of two first-order differential equations:

:equation:
\left\{ \begin{array}{lcl}
\dot x &=& v \\
\dot v &=& f(x)
\end{array} \right.

xxx
