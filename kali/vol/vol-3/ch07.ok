= A Final Version

== Clarity

*Bob*: It was fun to play with so many different versions, but I'm
beginning to get a little confused as to which version did what.
Maybe we should pick just one version, and use that while we add more
features and move toward specific applications.

*Alice*: I agree.  And since we decided not to worry, for now at least,
about performance, let us concentrate on clarity of expression.  I must
say, I like the last one best, in file <tt>rknbody6.rb</tt>, where
everything fits on one line.  However, the version where we gave the
+Body+ class explicit helper variables, in file <tt>rknbody4.rb</tt>,
was even shorter.

*Bob*: Yeah, I did not particularly like the idea of giving this poor
+Body+ class all possible helper variables for all possible application.
Even though we discussed more clever ways to do this, frankly, I don't
care too much what we will choose in the end.  I liked your suggestion
to send a command string to be evaluated dynamical, thereby generating
the proper helper variables, mostly because of its novelty.

*Alice*: And it goes with the spirit of the times: just-in-time-delivery!
But what I like best about this latest method is that it obeys the DRY
principle: we are not repeating ourselves.

*Bob*: Apart from the fact that you repeatedly bring up particular principles.

*Alice*: I'll repeatedly ignore that.  Apart from that point,
when clarity is really the criterion, I am not sure whether
the last version is really clearer.  Let us compare the forward Euler
algorithm in both cases, in <tt>rknbody4.rb</tt>:

 :inccode: .rknbody4.rb+forward

and in <tt>rknbody6.rb</tt>

 :inccode: .rknbody6.rb+forward

*Bob*: The last one is clearly shorter.

*Alice*: That I don't mind so much.  I'm just not happy with the fact that
it is not clear, for a casual reader, what that variable
+dt+ is doing there, as the first two arguments of +calc+, and the appearance
of +ba+ is also a mystery; there is no indication here that +ba+ stands for
`body array' and will get its value from <tt>@body</tt>, somewhere else.
In contrast,
the earlier version has nothing hidden: the <tt>@body.each{|b| . . . }</tt>
construct is vanilla flavor for someone familiar with Ruby.

== Brevity

*Bob*: Perhaps we can improve the +calc+ method of +Nbody+ further.
How about redefining it in such a way that we can leave out the first
argument altogether?

*Alice*: Ah, that's a good idea.  It is also a logical next step, after
introducing the shortcut notion of sending a string in the first place.
Once we do something that is somewhat dirty and not so self-explanatory,
we might as well go all the way.

*Bob*: I suppose that we would have to introduce an extra instance variable
<tt>@dt</tt> for +Nbody+.  Otherwise it will not be possible to remove
the first argument +dt+ from the current +calc+.  In fact, that would
make the definition even shorter.  So it would look very clean,
like this:

 :inccode: .rknbody7.rb+forward

Note that I have created yet another version of our code, in file
<tt>rknbody7.rb</tt>.

*Alice*: That is short and sweet, indeed.  And we have to modify +calc+
on the +Nbody+ level from what we had before:

 :inccode: .rknbody6.rb+calc+Nbody

to a version with only one parameter, namely the command string:

 :inccode: .rknbody7.rb+calc+Nbody

Since the other two parameters to the +calc+ method of +Body+ are now
both instance variables, their value is known here.

*Bob*: What else do we have to change?  We have to set the value of the
new variable <tt>@dt</tt> in the +evolve+ method, and we have to leave
out the +dt+ argument when invoking the integration methods.  Two
small changes, which leaves us with +evolve+ looking like this:

 :inccode: .rknbody7.rb+evolve

== Correctness

*Alice*: And the only other changes, besides the change in the forward Euler
algorithm we already saw, are the simplified readings of the three
other integrators.  They now become:

 :inccode: .rknbody7.rb+leapfrog

 :include: .rknbody7.rb+rk2

 :inccode: .rknbody7.rb+rk4

*Bob*: Time to check whether the new code does the same thing as all the
older ones:

 :commandoutput: ruby rknbody7a_driver.rb < figure8.in

*Alice*: And so it does.  Good!  I think we can stick with this version
as our work horse, for a while at least.

== More Information

*Bob*: There is one improvement I would like to add.  Remember when we were
debugging our code and we were analyzing a single time step, trying to figure
out whether the position and velocity were updated correctly?

*Alice*: Yes, that was a simple situation, in the case of the forward Euler
algorithm, and we could analytically calculate the acceleration.

*Bob*: Of course, in general we can't be so lucky, and I would prefer
to have an easy way to ask for an output of the acceleration as well.
Ah, come to think of it, we have this pretty print output version,
that we wrote long ago, but that never used since.  Here it is:

 :inccode: .rknbody7.rb+pp+Nbody

All it does is invoke the pretty print version for each particle:

 :inccode: .rknbody7.rb+pp+Body

which does nothing else put print the +Body+ instance in its standard
string form:

 :inccode: .rknbody7.rb+to_s

Well, let us just add an extra line for the acceleration.  Since
pretty print became +pp+, a pretty print with extras should be called
a +ppx+:

 :inccode: .rknbody8.rb+ppx+Body

I will put this version in file <tt>rknbody8.rb</tt>.

*Alice*: That makes a lot of sense.  You choose the standard error
output stream +STDERR+ because you don't want this extra debugging
information to be mixed up with the particle output snapshot, which
is written on the default standard output stream, and which can be
piped into another program.

And of course, you have to give +ppx+ a parameter, namely the array of
all the particles in the N-body system, otherwise our particle cannot
compute the acceleration that it receives from all other particles.
Let's see.  This means that +ppx+ on the +Body+ level must be invoked
from the +Nbody+ as:

 :inccode: .rknbody8.rb+ppx+Nbody

== An Initial Snapshot Output

*Bob*: Indeed.  Now what else is there left to do?  We don't want to
have this extra information all the time, since it would clutter up
the output.  Let us introduce a special flag, <tt>x_flag</tt>, a
boolean variable that will be set to `true' if the extra output is
desired, and set to `false' when we don't need it.

This means that the method that writes the diagnostics will now get
<tt>x_flag</tt> as a second parameter, and a few extra lines at the
end, to invoke +ppx+ if the flag is set to be `true':

 :inccode: .rknbody8.rb+write_diagnostics

*Alice*: Now that we are adding features, I would like to have the
option to echo the initial snapshot, the data file that is read in
before any integration step is taken.  I know that I can always read
that information myself from the input file, but sometimes it is nice
to have it right in front of you, together with the other data,

*Bob*: Yes, especially when are debugging and you want to take a
single time step.  Okay, let us introduce a second flag <tt>init_out</tt>.
If the value of this flag is `true', we will require an initial output,
in the form of a snapshot on the standard output stream.  If the value is
`false', we skip the initial output.

We can implement the effects of both flags, <tt>x_flag</tt> and
<tt>init_out</tt>, by passing them as additional parameters to
+evolve+.  The modifications to the body of this method are then very
minor.  We only have to change three lines.  First, the two calls to
<tt>write_diagnostics</tt> acquire <tt>x_flag</tt> as extra
parameter, as we have already seen.  Second, we add an extra line

 :include: .rknbody8.rb-1

just before we start the +while+ loop.  The new version of the +evolve+
method thus becomes:

 :inccode: .rknbody8.rb+evolve

*Alice*: An alternative would have been to make both flags into instance
variables for the +Nbody+ class.

*Bob*: Yes, that would perhaps look more tidy, giving us fewer arguments
to pass around.  Either way, I don't care very much: most class definitions
involve a trade off between the number of instance variables and the number of
arguments being passed around.  I'm happy just to keep them as
arguments for now.

== A New Driver

*Alice*: Let's make the necessary changes in the driver file as well:

 :inccode: .rknbody8a_driver.rb

== A Final Test

*Bob*: All very straightforward indeed: at the end the two extra parameters
for +evolve+, and above the introduction of the two flags in analogy with
the other parameters.  Let's test it out, to see whether we still get
the same results for our figure out orbit:

 :commandoutput: ruby rknbody8a_driver.rb < figure8.in

*Alice*: All is well, clearly.  Good!  So now we have a version of the code
that is both lean and easy to read on the level of the integrators,
and has extra debugging options.  Progress!.


