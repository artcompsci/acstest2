Date: Wed Oct 20 08:05:13 JST 2004

From: Piet Hut <piet@ias.edu>

 > At least, we need to be able to move between two state at any time,
 > not only at the era boundary, just to make sure some hyperbolic
 > encounters with very small periastron distance are handled
 > correctly.  

Very good point.

 > My feeling is that Worldbundle class might not be necessary. Also,
 > Snapshot class is just a convenient way for the WorldEra to process
 > requests from outside, and in principle should not be visible from
 > outside....

Interesting point.  Perhaps we have to think about space and time and
actual particles in different ways.  As long as we are talking about
stars (or small gas clouds; not a global gas medium), we start with
the identity of particles -- in other words, we take a look that is
inherently Lagrangian, rather than Eulerian.  Next, for each particle,
what counts is evolution in time.  Finally, in order to compute the
details of evolution, we need to compute forces, which are dependent
on spatial configurations.

Let's see whether we can paint a coherent meta-level picture.

Identity: each worldpoint is a (snapshot of an) object.
Identity + time: each worldline gives the history of an object,
                 a direct product of a single identity x time.
Identity + time + space: a world: this gives room for many objects.

So the series worldpoint -> worldline -> world is very natural.
Current implementation:
  worldpoint -> worldline: actual: array
                           virtual: continuous potential (virtual) cuts
  worldline -> world: actual: array
                      virtual: tree: some combinations of worldlines can
                               be temporarily bundled (covered), showing
                               itself to the world as just one bundle.

In fact, this last part I have just started for binaries, but it should
grow quickly into a more general approach.

The notion of era and snapshot arecuts in time (with 2 or 1 time points),
and they are largely for bookkeeping purpose: era to divide up the work,
in order to manage it better; snapshot to give particles the information
to calculate forces, and to determine isolation criteria for changing
the tree of worldlines.

Do you think that this is, in 20 lines, a good summary of the meta-level
picture, or is there something missing?

For the next step, you wrote that it may not be necessary to introduce
a worldbundle.  Does this mean that you prefer the starlab approach,
with a tree for all particles, with the same basic structure for nodes
and leaves -- the only difference being that inner nodes have pointers
to other nodes (that may or may not be leaves)?

That seems fine with me.  The main difference is that, from the outset,
we should think in a 4D picture, not a 3D picture.  Twelve years ago,
we thought in 3D, and made a binary tree.  Now we have a much more
complex starting point (tdyn-like):

  the starcluster as a whole is given by a worldline that threads
  through the center-of-density, say.  Each star is represented by
  a worldline that starts somewhere (at t=0, or at a merging event,
  or in starforming regions, from the collapse of a cloud) and can
  end somewhere (at the end of the calculation, or at a supernova).
  Similarly, each node, a local c.o.m. of a (sub)clump of stars,
  stars and ends somewhere.  Here are the pictures, with
  * is a star, a leaf in the tree; x is node, a non-leaf in a tree:

  3D kira:               x
                  * * * * * x * * *
                           * x
                            * *

  4D kali:        *      x         *     x
                  *      x          *   x
                  *      x            x
                  *  *   x            x
                  *  *   x            x
                  *  *   x          x   *
                  *  *   x        x      *
                  *  *   x      x         *

  In this last picture, the x line should be above the paper,
  the * in the paper, and the following picture should be below
  the paper: 

                                        * *
                                       * *
                                     ***
                                     ***
                                     *** 
                                   * *  
                                 * *     
                               * *        

  I assume here that an interacting triple can be part of a tree
  with three branches, not necessarily just in a binary tree.

So the main question is: what to do with this type of "tdyn"
structure, the cross section at fixed time (snapshot) is a tree,
which is a single top node, a mostly flat layer that could be an
array, and then small subtrees here and there.

One way to think about it, is to think it terms of worldlinesegments,
let's call them segments for short.  Each worldline is a connection of
segments, and each segment is a connection of worldpoints.  A segment
begins and ends at a vertex, a place where the 3D tree structure changes.
The picture will than be very much like a Feynman diagram, with a segment
basically a propagator: a free particle moving in time as a noninteracting
field, in between two interactions.  Let's call "segment" propagator.

So our first picture:

    worldpoint -> worldline

is replaced by

    worldpoint -> worldpropagator -> worldline

The vertices where the tree changes could then be called worldvertices.
The implementation could be just like a worldpoint; not clear wether we
want to use a different name (Worldvertex) for that class or just call
it Worldpoint always.

   Strictly speaking, every worldpoint is an elementary vertex
   connecting two propagators, and the elementary propagators are
   just worldlinesegments connecting two successive worldpoints.
   The term vertex and propagator, as I proposed them, simply apply
   to non-trivial cases: a vertex is connected with k != 2 propagators
   (k = 1,3,4,...), and a propagator has as its endpoints vertices that
   have k != 2.

Before I go on, does this sound like a good meta-level language?

Piet

