<article xmlns:src="http://nwalsh.com/xmlns/litprog/fragment"
         xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<articleinfo>
<title>Calculating Members of the Fibonacci Series in Ruby</title>
<author>
  <firstname>Piet</firstname>
  <surname>Hut</surname>
</author>
<author>
  <firstname>Jun</firstname>
  <surname>Makino</surname>
</author>
</articleinfo>

<para>This simple document is adapted from Norman Walsh's Perl
example.  It describes a simple, recursive
implementation of the Fibonacci series in Ruby.  We take the example
from the pragmatic programmers Programming Ruby book, p. 42.
The principal
motivation for this document is to demonstrate the use of Literate XML.
</para>

<section><title>Recursive Definition</title>

<para>The Fibonacci series begins: 1 1 2 3 5 8 13... Each member of
the series, after the first two, is the sum of the preceding two
members.</para>

<para>This can be implemented recursively by calculating the preceding
two members of the series and returning their sum:</para>

<src:fragment id="sub.fib.recursion">
i1, i2 = i2, i1+i2
</src:fragment>
</section>

<section><title>The <function>fib</function> Function</title>

<para>The heart of this program is the recursive function that
calculates the members of the Fibonacci series.</para>

<para>The first and second members of the Fibonnacci series are
<quote>1</quote>; all other values are calculated recursively.</para>

<src:fragment id="sub.fib">
def fibUpTo(max)
  i1, i2 = 1, 1
  while i1 &lt; = max
    yield i1
    <src:fragref linkend="sub.fib.recursion"/>
  end
end
</src:fragment>
</section>

<section><title>Code Preamble</title>

<para>The program preamble simply establishes a default location for
the Perl executable and informs the interpreter that we want to use
the strict pragma.</para>

<src:fragment id="preamble">
#!/usr/bin/ruby
#
# fibUpTo
#
#==============================================================================
</src:fragment>
</section>

<section><title>The Program</title>

<para>The program prints out the Fibonacci number requested:</para>

<src:fragment id="top">
<src:fragref linkend="preamble"/>
<src:fragref linkend="sub.fib"/>

fibUpTo(1000) { |f| print t, " "}

</src:fragment>
</section>

</article>
