Date: Fri Jan 09 15:57:51 JST 2004

From: Piet Hut <piet@ias.edu>

Hi Jun:

Here is a possible outline for the book.

               WRITING A SIMPLE N-BODY CODE

Ch. 1: Dense Stellar Systems

Alice and Bob meet each other.  Alice is 45, started out in particle
physics, then worked on cosmology, including large scale structure
simulations.  Bob is 35, just got tenure, started out as an observer
of star forming regions, but moved more and more toward simulations.

They talk about how the astrophysics of dense stellar systems is going
to be a central topic for decades to come.  Cosmology, from the top
down, is now able to resolve star cluster size masses, and in addition
star formation is now the largest uncertainty in large scale structure
simulations.  Star formation, from the bottom up, is now being modeled
in the context of giant molecular clouds, and before long will be able
to model the formation of reasonably large star clusters.  Besides
forming the meeting ground of stellar astrophysics and cosmology,
dense stellar systems include the most fascinating astrophysical
environments, those that can be found around supermassive black holes
in the nuclei of galaxies.

They then lament the fact that many hundreds of astronomers are
observing dense stellar systems, but that only a few dozen individuals
are involved in modeling those systems.  They wonder what the reasons
are.  They suggest the fact that cosmology has been the most fascinable
topic; the fact that the elegance of equal-mass modeling ended in the
late eighties when the mathematical physics of those systems were
finally understood; the problem with kitchen-sink simulations that you
are not sure what to believe of the outcome.

Still, modeling dense stellar systems is just too important to be left
out, they conclude.  Since both of them happen to be in a place in
their career where they are looking for a new project, they decide to
at least have a look at the state of the art of modeling dense systems.
They look at some web sites, and come across MODEST.  They realize
that they have two choices, NBODYx/BSE and starlab/kira/SeBa.  They
wonder out loud how complex these codes are, and download them, to
have a look at them.  Both being experienced already in N-body methods,
familiar with tree codes and to some extent with SPH and other hydro
methods, they can sort of see what is going on, but realize that it
will take a very long time to understand all the details.

Most importantly, they realize how little modularity there is, and how
difficult it will be to validate and modify the codes, two things that
prior experience has taught them to be absolutely crucial.  They
discuss the way in which (astro)physicists write code, how their
education does not teach them anything about good style and approach.
They swap anecdotes about stellar evolution codes that are unreadable
and about a recent book by a well known hydro expert without even
subroutines.  They also talk about stories they have heard from people
in other areas of scientific modeling where people finally decided to
rewrite legacy code, how it took a few years, but how that resulted in
a much more flexible to build further software on.  Bob mentions his
experience in observing, and Alice talks about symbolic computations
in high energy physics.

Ch. 2: Rapid Protyping

In this context they mention one extreme: the Sussman/Wisdom book,
which appeals to them in many ways.  However, they are afraid that the
isolation of Scheme may be too much.  They discuss Perl and Python as
more practical compromises, better than C and C++, which Alice has
experience with, and Fortran, where Bob has experience with, but also
has grown frustrated with.  However, they are also afraid that a
compromise may have the disadvantages of both sides, and they both
feel that it would be better to have a single coherent vision that
they can agree with.  Coherence is better than committee decisions.
In short, they want a pragmatic approach.

Just for fun, since they are sitting behind a terminal, they decide to
type in "pragmatic programming", in the hope to find something there,
more as a joke.  To their surprise they find the two books of two
characters that call themselves the Pragmatic Programmers.  They
browse through a few pages of their first book and like it a lot,
since it really reflects their own experience.  Like Kernighan and
Pike, but addressing more broadly the whole of software development,
says Bob.  Like Knuth, very sensible, but a generation later, says
Alice.

Then they look at the second book, about Ruby.  Since they already
thought about Perl and Python, they give it a closer look, and become
convinced that this may be better than just a comprise.  They decide
to give it a try.  After all, 90% of an N-body code takes less than 1%
of the compute, so who cares about the speed of an interpreted language.
It is flexibility and clarity and rapid prototyping and recycling that
counts.  What to do first?  Get familiar with the language, and write
something simple but actually useful, in order to see how it works out
in practice; in other words, a pragmatic program.

Alice suggests to write a constant time step leapfrog.  Bob laughs and
says that he recognizes that Alice comes from cosmology.  Alice counters
that Bob's SPH experience must make him feel happy with leapfrog.  Bob
says that, yes, for problems with softening that might not be too bad,
but now they want to do stellar dynamics of stellar systems, and they
should be able to handle point particles.  At the very least they need
variable time steps, and much better even individual time steps.  He
quotes the classic paper by Makino and Hut (1988), Performance Analysis
of Direct N-Body Calculations, to make his point.  And by the way, when
you get close encounters, the leapfrog sucks.  Fourth-order schemes are
a must, and Hermite is the most elegant scheme.

Alice agrees that something like NBODY1h would be a good idea, but she
laughs at the idea of learning a whole new computer language by starting
to write such a complicated code from scratch.  Shouldn't you first learn
to do I/O and to write a simple class for individual particles and for
the whole system?  Sure, says Bob, a bit annoyed that Alice seems to use
her longer experience and seniority to push for what he thinks is an
overly indirect and long-winded approach.  He is still not completely
used to have tenure, and he automatically feels the tension between
what he thinks is best and the need to be respectful to more senior
professors.  But, Bob tries once more, once you write a leapfrog, it
wouldn't take many more lines to write a Hermite code, right?  And
to go from equal to variable time steps is also only a few more lines,
basically having a time step criterion, which in an interpreted language
is rather simple to add.  And even block time steps isn't that big of
a deal, once you figure out what to do, something you pick up from
other codes anyway.

Alice has to admit that an equal-timestep leapfrog code will probably
be more than half as long as an individual time step block time step
code with Hermite.  But there is another argument, she adds.  The main
reason to use an interpreted object-oriented language like ruby is to
be able to rapidly switch between classes and methods, changing
inheritance and mixins; all so much more easily than in C++.  So by
providing both a leapfrog and a Hermite code, they can get valuable
experience in switching between methods.  If they really get serious
in writing a full-fledged dense stellar systems code, they surely will
need to be able to switch methods, at some point.  And to get experience
doing so early on will help them, first of all, to decide whether ruby
is really the right language for the job, and secondly, if they go
with ruby, they will then have the necessary experience to use ruby in
a way that makes such method switching natural.

Meanwhile, although defending her point of view eloquently, Alice is
having her doubts too.  She knows how easy it is to waste time when
trying to do something that is too elegant.  However, before she can
say that, to her surprise Bob brings up a point in favor of starting
with a leapfrog.  If they would start with a complete NBODY1h type
code, he says, they would probably just translate such a code line by
line into ruby.  That will probably work, but they run the risk that
in that way they never really get a flavor of the language, and so
will not be able to tap the real power of ruby.  That, for him, is a
more important argument to start with the leapfrog.

Alice has to laugh again, and tells Bob that she was just about to
agree with him that starting with NBODY1h would not be such a bad
idea after all, but that she must say that Bob's latest argument is
certainly convincing too.  What she doesn't tell Bob is that she
thinks it is funny that he could agree to her idea only after he
came up with a different argument for it; even so, she appreciates his
independence and critical attitude.  Bob, meanwhile, has to smile too,
realizing that Alice is not as inflexible as he had thought, and
reminding himself at the same time that he now has tenure, after all,
and that there really is no reason not to push his own agenda and use
his own judgement.

Ch. 3: A Leapfrog in Ruby

They then get seated in front of a terminal, and decide to get going,
to write an equal time step leapfrog code.

Start with the two obvious clasess, Body and Nbody, and finding out
how to get data in and out of it: I/O.  Rather flexible, without types.

In addition to having doors in a car, you need a steering wheel:
Command Line arguments.  They are pleased that this has been provided
already in the language.

They then code up the leapfrog, and test that it is second-order accurate.

During all this, they discuss how to divide the code over different files,
whether or not to inherit classes to make new subclasses, whether or not
to define modules, for mixin into classes.

Ch. 4: Speedup with C modules

They have noticed right away that ruby has set them back by ten to
fifteen years, as far as speed is concerned.  They start experimenting
with rewriting parts in C, and find a speedup of x10, x5, x4.

Ch. 5: Hermite in Ruby, and plotting

They first add softening, to make the leapfrog at least a little useful,
and then quickly move to Hermite.  They discuss the ease of switching
between leapfrog and hermite.  They decide they really need some form
of plotting.  They try both Gnuplot and pgplot, are happier with the
latter.

Ch. 6: Cold collapse

They decide to try a cold collapse with softening.  Using the natural
sorting methods in ruby, they write a script to make lagrangian radia
visible on the command line.  They are pleased with how simple and
natural it is to get that type of basic information out, something
that is only indirectly visible in a plot.  Bob (or Alice?) gets
excited and suggests to do some mass segregation experiments.  Alice
(or Bob?) says that they really should move on, that they can do all
that much better once they have their NBODY1h equivalent in place.
Reluctantly Bob (or Alice) agrees.

Ch. 7: Block Time Steps

They look at NBODY1 and NBODY4 and Kira, but finally decide to start
from scratch, because all these examples just look too complicated;
NBODY1 does not have block time steps (?) and the other two are simply
too complex.  They do quite a bit of testing and developing and arguing.

Ch. 8: Core Collapse

Having a dense stellar systems code, they are curious whether they cal
actually see the center piece of collisional stellar dynamics: core
collapse.  They try 64 particles, are not quite sure, do 128, it becomes
clearer, and then for 256 they are both convinced they see core collapse.
In all cases, they notice how things get bad quickly once binaries form.

At this point: time to move on to the next book.

