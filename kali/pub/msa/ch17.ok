= Leapfrog

== Interleaving Positions and Velocities

*Carol*: Erica, we now have a second-order algorithm, modified Euler,
but you mentioned an other one, quite a while ago, that you seemed to prefer.

*Erica*: Yes, the _leapfrog_ algorithm, a nice and simple scheme.

*Dan*: What a strange name.  Does it let particles jump around like frogs?

*Carol*: Or like children jumping over each other?

*Erica*: Something like that, I guess.  I never thought about the
meaning of the name, apart from the fact that something is leaping
over something, as we will see in a moment.  The algorithm is used
quite widely, although it has different names in different fields of
science.  In stellar dynamics you often hear it called leapfrog, but
in molecular dynamics it is generally called the Verlet method, and
I'm sure there must be other names in use in other fields.

Here is the idea.  Positions are defined at times <tex>$t_i, t_{i+1},
t_{i+2}, \dots $</tex>, spaced at constant intervals <tex>$\Delta
t$</tex>, while the velocities are defined at times halfway in
between, indicated by <tex>$t_{i-1/2}, t_{i+1/2}, t_{i+3/2}, \dots
$</tex>, where <tex>$t_{i+1} - t_{i + 1/2} = t_{i + 1/2} - t_i =
\Delta t / 2$</tex>.

It is these positions and velocities that `leap over' each other.
The leapfrog integration scheme reads:

:eqnarray:
\label{leap_half_time}
\br_{i} & = & \br_{i-1} + \bv_{i-1/2} dt \label{leapfrog-leap-step1}
  \nonumber \\
\bv_{i+1/2} & = & \bv_{i-1/2} + \ba_i dt \label{leapfrog-leap-step2}

Note that the accelerations <tex>${\bf a}$</tex> are defined only on
integer times, just like the positions, while the velocities are
defined only on half-integer times.  This makes sense, given that the
acceleration on one particle depends only on its position with respect
to all other particles, and not on its or their velocities.  To put it
in mathematical terms, for many situations in physics the acceleration
depends on velocity and position, as <tex>${\bf a}({\bf r}, {\bf v})$</tex>.
The motion of an electron in a magnetic field is one example, with the
Lorentz force being velocity dependent.  And in any situation in which
there is friction, the friction is typically stronger for higher velocities.
However, in the case of Newtonian gravity, the velocity dependence is absent:
<tex>${\bf a}({\bf r}, {\bf v}) = {\bf a}({\bf r})$</tex>.

*Carol*: I like the nice symmetric look of Eq. (ref(leap_half_time)).
But how do you get started?  If you know the positions and velocities
at time <tex>$t_i$</tex>, how are you going to construct the velocities
at time <tex>$t_{i+1/2}$</tex>?

*Erica*: The simplest way to extrapolate the velocities from <tex>$t_i$</tex>
to <tex>$t_{i+1/2}$</tex> is by using a Taylor series. and the simplest
nontrivial Taylor series is the one that takes only one term beyond the
initial value.  It turns out that such utter simplicity is already enough!

Concretely, we can start with the initial conditions <tex>${\br}_0$</tex>
and <tex>${\bv}_0$</tex>, and take the first term in the Taylor series
expansion to compute the first leap value for <tex>${\bf v}$</tex>:

:equation:
{\bv}_{1/2} = {\bv}_0 + {\ba}_0 \Delta t / 2.

We are then ready to the first line of apply Eq. (ref(leap_half_time))
to compute the new position <tex>${\bf r}_1$</tex>, 
using the first leap value for <tex>${\bf v}_{1/2}$</tex>.
Next we compute the acceleration <tex>${\bf a}_1$</tex>, using Newton's
law of gravitation, and this enables us to compute the second leap value,
<tex>${\bf v}_{3/2}$</tex>, using the second line of apply
Eq. (ref(leap_half_time)).  In this way we just march on.

*Carol*: And when you want to stop, or pause in order to do a printout,
you can again construct a Taylor series in order to synchronize the
positions and velocities, I presume?  If you make frequent outputs,
you'll have to do a lot of Tayloring around.  I wonder whether that
doesn't affect accuracy.  Can you estimate the errors that will be
introduced that way?

*Erica*: Ah, the beauty here is: you do not introduce any extra errors!
In fact, what we usually do is _never_ use the half-integer values for
the velocity in any explicit way.  Here, let me rewrite the basic
equations of the algorithm, in such a way that position and velocity
remain synchronized, both at the beginning and at the end of each step.

:eqnarray:
\label{leap_whole_time}
{\br}_{i+1} & = & {\br}_i + {\bv}_{i} dt + 
{\ba}_{i} (dt)^2/2                                  \nonumber \\
{\bv}_{i+1} & = & {\bv}_i + ({\ba}_i +
{\ba}_{i+1})dt / 2

*Dan*: That looks totally different.

*Erica*: Ha, but looks decieve!  Notice that the increment in
<tex>${\br}$</tex> is given by the time step multiplied by
<tex>${\bv}_{i} + {\ba}_{i} dt / 2$</tex>, effectively equal
to <tex>${\bv}_{i+ 1/2}$</tex>.  Similarly, the increment in
<tex>${\bv}$</tex> is given by the time step multiplied by
<tex>$({\ba}_i + {\ba}_{i+1}) / 2$</tex>, effectively equal to the
intermediate value <tex>${\ba}_{i+1/2}$</tex>.  In conclusion,
although both positions and velocities are defined at integer times,
their increments are governed by quantities approximately defined at
half-integer values of time.

== Time Symmetry

*Dan*: I'm still not quite convinced that Eq. (ref(leap_half_time)) and
Eq. (ref(leap_whole_time)) really express the same integration scheme.

*Erica*: An interesting way to see the equivalence of the two descriptions
is to note the fact that the first two equations are explicitly
time-reversible, while it is not at all obvious whether the last two
equations are time-reversible.  For the two systems to be equivalent,
they'd better share this property.  Let us check this, for both cases.

*Carol*: Eq. (ref(leap_half_time)) indeed looks pretty time symmetric.
Whether you jump forwards or backwards, in both cases you use the same
middle point to jump over.  So when you first jump forward and then
jump backward, you come back to the same point.

*Erica*: Yes, but I would like to prove that, too, in a mathematical
way.  It is all too easy to fool yourself with purely language-based
analogies.

*Dan*: Spoke the true scientist!

*Carol*: Well, I agree.  In computer science too, intuition can lead you
astray quite easily.  How do you want to check this?

*Erica*: Let us first take one step forward, taking a time step
<tex>$+dt$</tex>, to evolve <tex>$\{{\br}_i, {\bv}_{i-1/2}\}$</tex> to
<tex>$\{{\br}_{i+1}, {\bv}_{i+1/2}\}$</tex>.  We can then take one
step backward, using the same scheme, taking a time step of
<tex>$-dt$</tex>, back in time.  Clearly, after these two steps the
time will return to the same value since <tex>$t_i +dt-dt=t_i$</tex>.

We now have to inspect where the final positions and velocities
<tex>$\{{\br}_f(t=i), {\bv}_f(t=i-1/2)\}$</tex> are indeed equal to
their initial values <tex>$\{{\br}_i, {\bv}_{i-1/2}\}$</tex>.  Here is
the calculation.  First we apply the first line of Eq. (ref(leap_half_time))
to compute <tex>${\br}_f$</tex> as the result of the step back in time,
and then we again apply the first line of Eq. (ref(leap_half_time)), to
compute the forward step, and we see that indeed
<tex>${\br}_f = {\br}_i$</tex>.  Next we apply the second line of
Eq. (ref(leap_half_time)) two times, to find that
<tex>${\bv}_f = {\bv}_i$</tex>.  Here is the whole derivation:

:eqnarray:
{\br}_f & = & {\br}_{i+1} - {\bv}_{i+1/2} dt \nonumber \\
      & = & \left[ {\br}_i + {\bv}_{i+1/2} dt \right]
            - {\bv}_{i+1/2} dt \nonumber \\
      & = & {\br}_i \nonumber \\
                  \nonumber \\
{\bv}_f & = & {\bv}_{i+1/2} - {\ba}_i dt \nonumber \\
      & = & \left[ {\bv}_{i-1/2} + {\ba}_i dt \right]
            - {\ba}_i dt \nonumber \\
      & = & {\bv}_{i-1/2} \nonumber

*Carol*: Can't argue with that!  This is a crystal clear derivation.
In an almost trivial way, we can see clearly that time reversal causes
both positions and velocities to return to their old values, not only
in an approximate way, but exactly.  This has amazing consequences!
When we write a computer program for the leapfrog algorithm, we can
evolve forward a thousand time steps and then evolve backward for the
same length of time.  Although we will make integration errors at
every step, and although the errors will get compounded, all those
errors will exactly cancel each other.

*Don*: Amazing indeed, but I would be really amazed if the same time
symmetry would hold for that other set of equations,
Eq. (ref(leap_whole_time)), that don't look time symmetric at all!

*Erica*: Yes, that's where the real fun comes in.  The derivation
is a bit longer, but equally straightforward, and the steps are all
the same.  Here it is:

:eqnarray:
{\br}_f & = & {\br}_{i+1} - {\bv}_{i+1} dt + 
{\ba}_{i+1} (dt)^2/2 \nonumber \\
      & = & \left[ {\br}_i
 + {\bv}_i dt + {\ba}_i (dt)^2/2 \right]
 - \left[ {\bv}_i + ({\ba}_i + {\ba}_{i+1})dt / 2 \right] dt
            + {\ba}_{i+1} (dt)^2/2 \nonumber \\
      & = & {\br}_i \nonumber \\
                  \nonumber \\
{\bv}_f & = & {\bv}_{i+1}
- ({\ba}_{i+1} + {\ba}_i)dt / 2  \nonumber \\
      & = & \left[ {\bv}_i + ({\ba}_i + {\ba}_{i+1})dt / 2 \right]
            - ({\ba}_{i+1} + {\ba}_i)dt / 2  \nonumber \\
      & = & {\bv}_i  \nonumber

In this case, too, we have exact time reversibility.  Even though not
at all obvious at first, as soon as we write out the effects of
stepping forward and backward, the cancellations become manifest.

*Dan*: Okay, I'm convinced!  Let's code it up.  Obviously, 
Eq. (ref(leap_whole_time)) is the better set of expressions to use,
since then we can forget about any leaping and frogging, and just
move from time <tex>$t_i$</tex> to time <tex>$t_{i+1}$</tex>, with
both positions and velocities


== xxx






== xxx

Here is 

<tt>leapfrog_100.rb</tt>:

 :inccode: .leapfrog_1000_steps.rb

Try:

 :commandoutput: ruby leapfrog_1000_steps.rb > leapfrog_1000_steps.out
 :commandinput: gnuplot END
set term post eps
set output "leapfrog_1000_steps.ps"
set size ratio -1
plot "leapfrog_1000_steps.out"
quit
END

:figure: leapfrog_1000_steps.ps 10cm leapfrog_1000_steps
First attempt at leapfrog integration, with step size <tex>$dt=0.01$</tex>.

xxx
