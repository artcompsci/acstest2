= Scaling

== Units Adjustment

*Bob*: We now have a code that produces particle positions and velocities,
drawn from a Plummer distribution function represented in proper standard
units of length, time, and mass, and properly centered at the center
of mass, in position as well as velocity.  What more could we possibly
want?  I think we can call it a day.

*Alice*: Before doing so, there is just one thing that is still bothering me.
Even though our Plummer realizations are now perfectly centered, their units
are not quite right.

*Bob*: But I thought we had checked that?  Starting with <tt>mkplummer3.rb</tt>
we have made sure to use standard units.

*Alice*: Well, let's see what happens for really low N values:

 :commandoutput: kali mkplummer5.rb -n 3 -s 1 | kali energy.rb
 :commandoutput: kali mkplummer5.rb -n 3 -s 2 | kali energy.rb
 :commandoutput: kali mkplummer5.rb -n 3 -s 3 | kali energy.rb
 :commandoutput: kali mkplummer5.rb -n 3 -s 4 | kali energy.rb

*Bob*: Hmm, that doesn't look like the desired total energy value of minus
one quarter.  And I certainly don't like the total energy to become positive!
That means that some of our realizations are actually unbound!

*Alice*: The problem is that, even though our underlying distribution function
has been scaled correctly, any small-number realization will introduce
fluctuations in the actual numbers that are picked out.

*Bob*: Ah, of course, this is just what happened with the center of mass.
Even though an ensemble of many realizations will shown the average
center of mass position and velocity values to be almost zero, individual
realizations need to be adjusted, as we just did.  Similarly, we will have
to rescale the positions and velocities, to make any single realization
come out with the right energy.

*Alice*: Effectively, we have to rescale length and time units; length
for the positions, and in addition separately time for the velocities.

== Implementation

*Bob*: Let's create a new file.  How about calling it <tt>mkplummer.rb</tt>,
without a number attached to it now, to show that this will be our final
version, that we can use as a work horse?

*Alice*: Hope springs eternal.  But go ahead, we can always rename it to
<tt>mkplummer.rb6</tt>, like in a few minutes.

*Bob*: No, I think this will be really it.  Well, we will see.

*Alice*: We have to do two separate things.  Just getting the total energy
to be -1/4 is not good enough: we want to make sure that we have an
accurate virial equilibrium, with a kinetic energy of +1/4 and a potential
energy of -1/2.  This is the reason that we have to scale length and time
units separately.

*Bob*: In analogy with our way to adjust the center of mass, we can now
adjust the units.  If I understand correctly what you just said, it should
be this, right?

 :inccode: .mkplummer.rb+adjust_units

*Alice*: That indeed looks correct.  And you invoke that function _after_
you invoke the center-of-mass adjustment.

*Bob*: Ah, yes, the order is important.  Not for the potential energy,
since that only depends on relative distances.  But the kinetic energy
depends on the square of the velocity differences between each particle
and the center of mass.  Good point.

You know, let me modularize the +mkplummer+ method a bit further.
I'm sure you would love that!

*Alice*: Any move to more modularity is welcome, within reason, but something
tells me you won't unreasonably overshoot toward modularity.

*Bob*: You bet I won't.  But with all the adjustments we are now making,
it would seem more clear to isolate the actual sampling procedure in a
separate methods <tt>plummer_sample</tt>, and to leave the rest of the
administrative details to the higher-level function <tt>mkplummer</tt>,
which can deal with picking the right seed, invoking the sampling function,
pushing the sampling results on the stack, and doing all the final adjustments.

*Alice*: You're becoming a true modularity spokesman!

*Bob*: I'll ignore that.  This is just common sense.

*Alice*: Let's hope it becomes more common.

== Treating Even the Vacuum

*Bob*: Here is the top level method:

 :inccode: .mkplummer.rb+mkplummer

and here is where the actual sampling is done, the place where a
single particle receives its initial position and velocity values,
before they later will be adjusted:

 :inccode: .mkplummer.rb+plummer_sample

*Alice*: Ah, I see that you only invoke the <tt>adjust_units</tt>
method if you have two or more particles.  Of course, if you have
only a single particle, then its velocity, after adjusting it to the
center of mass frame, will be zero.

*Bob*: Yes, I didn't want to risk dividing by zero, and in any case,
there is no need to scale anything for a one-particle system already
at rest.

*Alice*: But what is the meaning of the +if+ statement for the
center-of-mass adjustment?

*Bob*: Oh, I thought I might as well make it work for any reasonable
value, including the vacuum, with zero particles.  Without that
clause, for <tt>c.n = 0</tt> the method <tt>adjust_center_of_mass</tt>
would try to set the length of the position and velocity vectors of
the center of mass to the same length as that of the position vector
of the first particle, which would be non-existent, and so you would
get an error message -- even though the rest of the body of
<tt>adjust_center_of_mass</tt> would work fine for zero particles.

*Alice*: I like building in such careful statements.  Who knows, at some
point we may decide to build slews of N-body models with different
particle numbers, and it is nice to have them all behave well, for any
reasonable and even not so reasonable numbers, including 0.  However,
what will happen for negative numbers?

*Bob*: I haven't tested that.  But when I look at +mkplummer+ above,
it would seem that the do loop never gets executed, so effectively
if will still give a zero-particle system, without running into any
more serious error.

*Alice*: That may or may not be what we want.  In any case, we can discuss
more careful exception handling some other time.

== Bells and Whistles

*Bob*: I agree.  What next.  Ah, let me take out this quiet start business.
It was an interesting idea, but as we noticed above, with center of
mass adjustment it will get partly screwed up anyway.  Actually, I
just realized a much more important reason _not_ to do a radial
layering of particles.  Pretty soon we may want to give some particles
extra properties.  We could introduce a mass spectrum, or promordial
binaries, or what not.  If we make sure that the original distribution
of particles is truly random, without any layering bias, we are less
likely to wind up with unrealistic distributions . . .

*Alice*: . . . such as having the lighter particles all in the center
and the heavier ones outside.  Yes, I see what you mean.  Let's keep
it simple and forget about being too quiet.

*Bob*: Finally, we can use some of the bells and whistles that we have
added before, when we wrote the ACS I/O routines.  There we allowed the
user to specify the number of digits accuracy and indentation
prefered.  If you're dealing with only a thousand particles, you may
not want double precision, if that will cut down your inital file
length by a factor half.  Let us test the options we have provided:

 :commandoutput: kali mkplummer.rb -h
 :commandoutput: kali mkplummer.rb -n 3 --precision 7 --indentation 4

*Alice*: Fine to have the extra freedom, but I doubt we'll ever use it;
as soon as you start doing a run, you'll probably want to keep the output
to full precision.

*Bob*: In any case, at least for display purposes it all fits
within the good old VT100 80-column wide screen.

*Alice*: Which actually came from the 80-column punched card format.
But you're too young to remember that.

*Bob*: Next time we go to a museum you can point out to me what the world was
like when you grew up.

== Checking the Output

*Alice*: Let's check again, starting with the zero-body problem, while working
our way up.  And we might as well use your precision cap to keep it punched
card printable:

 :commandoutput: kali mkplummer.rb -n 0 --precision 10
 :commandoutput: kali mkplummer.rb -n 1 --precision 10
 :commandoutput: kali mkplummer.rb -n 2 --precision 10

== Checking the Energy

That all works as it should.  Now an energy check:

 :commandoutput: kali mkplummer.rb -n 0 | kali energy.rb
 :commandoutput: kali mkplummer.rb -n 1 | kali energy.rb
 :commandoutput: kali mkplummer.rb -n 2 | kali energy.rb

Looks good so far.  Even the zero-body behaves!  A single particle at
rest in the center has neither potential nor kinetic energy.  And the
two-particle realization is nicely scaled to virial equilibrium.

*Bob*: Let's try the same four realizations you made earlier, with
the very same seeds:

 :commandoutput: kali mkplummer.rb -n 3 -s 1 | kali energy.rb
 :commandoutput: kali mkplummer.rb -n 3 -s 2 | kali energy.rb
 :commandoutput: kali mkplummer.rb -n 3 -s 3 | kali energy.rb
 :commandoutput: kali mkplummer.rb -n 3 -s 4 | kali energy.rb

*Alice*: Good!  Believe it or not, we may not need to call this
version <tt>mkplummer6.rb</tt>, after all.  It may remain
<tt>mkplummer.rb</tt> and become our standard initial conditions
generator.

*Bob*: I told you so!

