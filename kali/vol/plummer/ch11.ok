= Centering

== Center of Mass Adjustment

*Bob*: I could see that you were not too impressed with my quiet start.
However, I expect that you may be more interested in a more important
improvement I would like to make, the center of mass adjustment.

*Alice*: Indeed.  I think it would be better to shift to a coordinate
system in which the newly created star cluster has its center of mass
in the origin of the coordinate system.  In addition, it would be nice
to give the coordinate system a boost in such as way that the velocity
of the center of mass is zero in that coordinate system.  Is this what
you had in mind?

*Bob*: Exactly.  It would of course be possible to sprinkle particles
in space, and in velocity space, in pairs, so that you would cancel
the contributions: you could place them at opposite sides of the center,
and give them opposite velocities.  But that would create artificial
correlations, and I don't like to do that.  Better to create a realization
first, and then to shift the coordinate system in the way you suggested.

After creating our model, we measure the center of mass position
<tex>$\br_{\rm com}$</tex>, which I will name <tt>pos_com</tt> in the
code, as follows:

<tex>$$
\br_{\rm com} \,=\, {\sum_{i=0}^{N-1} m_i\br_i \over \sum_{i=0}^{N-1} m_i}
\,=\, {1\over M}\sum_{i=0}^{N-1} m_i\br_i
$$</tex>

and similarly for the velocity of the center of mass, which I will call
<tt>vel_com</tt> in the code:

<tex>$$
\bv_{\rm com} \,=\, {\sum_{i=0}^{N-1} m_i\bv_i \over \sum_{i=0}^{N-1} m_i}
\,=\, {1\over M}\sum_{i=0}^{N-1} m_i\bv_i
$$</tex>

If we then subtract <tex>$\br_{\rm com}$</tex> from each particle's
position, and also subtract <tex>$\bv_{\rm com}$</tex> from each particle's
velocity, we will be guaranteed that
<tex>$\br_{\rm com}=\bv_{\rm com}=0$</tex>.  This is then the shift that
we ordered.

== Implementation

Here is a straightforward implementation, in file <tt>mkplummer5.rb</tt>.
At the end of the +mkplummer+, after all the work is done, I am adding
a line:

 :include: .mkplummer5.rb-1

which invokes the following method:

 :inccode: .mkplummer5.rb+adjust_center_of_mass

*Alice*: Straightforward indeed.  Normally you would have to divide
the positions and the velocities by the total mass, but here the
total mass is unity, so you can skip that.  Okay, that looks good,
but as always, let's first do a couple checks.

*Bob*: Never hurts.  Here they are.  First the energy:

 :commandoutput: ruby mkplummer5.rb -n 1000 | ruby energy.rb

That certainly looks fine.  Now the quartiles:

 :commandoutput: ruby mkplummer5.rb -n 100 | ruby quartiles.rb

== A Bit Disquieting

Hmm, a bit less quiet than before, it seems.  Let me try a few more:

 :commandoutput: ruby mkplummer5.rb -n 100 | ruby quartiles.rb
 :commandoutput: ruby mkplummer5.rb -n 100 | ruby quartiles.rb

Definitely less quiet than before.  How can shifting . . . ah, shifting
the center of mass also shifts the positions of my idealized mass shells
which provided the scaffolding for sprinkling particles in such a nicely
layered way.  Of course!

*Alice*: Yes, that must be the reason.  Well, that's the price you have to pay
for preventing your model for being off-center!

*Bob*: Perhaps layering was not such a hot idea after all.  Oh, well.
I may as well leave it in, for now.

== Checking the One-Body Problem

*Alice*: So far, so good, but we should check that the center of mass
is indeed in the center, and will stay there.

*Bob*: That may not be so easy to check, unless we write a new analysis
tool to report the center of mass position and motion.

*Alice*: And that tool would reflect the same equations you just entered
in the code, making it less of independent check.

*Bob*: Ah, wait a minute: we can look at a few-body system.  Starting with
one body, it should sit happily in the center, and two bodies should now
be placed opposite each other, in position as well as in velocity.

*Alice*: Yes, of course.  That's a good way to check.  Better first run those
cases with the version you created when you went to standard units, and then 
to repeat them for your shifted version.

*Bob*: Okay, here is a one-body system without shifting:

 :commandoutput: ruby mkplummer3.rb -n 1

and here with the proper center of mass shifts:

 :commandoutput: ruby mkplummer5.rb -n 1

*Alice*: Proper indeed.

== Checking the Two-Body Problem

*Bob*: And here for the two-body system, unshifted:

 :commandoutput: ruby mkplummer3.rb -n 2

and shifted:

 :commandoutput: ruby mkplummer5.rb -n 2

*Alice*: Good!  I believe the code now.  We have acquired a well-adjusted
codes that speaks in standard units.
