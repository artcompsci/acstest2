= Convergence for a Circular Orbit

== Better Numbers

*Carol*: Yes, the orbit is looking recognizably circular, but that's about it.
The errors are still quite large.  I would like to know exactly how
large they are.

*Erica*: How about repeating what we did in the elliptic case,
by having a peak at the numbers at the beginning and at the end of the
run?

*Carol*: Good idea.

 :commandoutput: ruby euler_circular_1000_steps.rb > euler_circular_1000_steps.out
 :commandoutput: head -5 euler_circular_1000_steps.out
 :commandoutput: tail -5 euler_circular_1000_steps.out

*Dan*: That looks a lot better than before, no more huge numbers!

*Erica*: But the numbers are still too large.  The first few numbers
give a distance of about 1, but the last few numbers are too large.

*Dan*: I see, the separation along the _x_ axis is about <tex>$1.0$</tex>,
and the separation along the _y_ axis is about <tex>$0.6$</tex> . . .

*Erica*: . . . and with Pythagoras that gives us a distance of
<tex>$\sqrt{1\cdot1+0.6\cdot0.6}\approx 1.17$</tex>.
Not wildly off, but not very good either.

*Carol*: Remember, just after Eq.(ref(first_step_error)),
how I estimated the error after one orbit to be 3%?  After one and a third
orbit it should then have been 4%, and we got 17%.  Perhaps nonlinear effects
contributed, but at least my original guess of several percent was not way
off!

== Even Better Numbers

*Erica*: After Erica predicted us to be off by 3% per orbit, Dan showed
what should happen for a time step that is ten times smaller: the
error should shrink to 0.3%.

*Dan*: So in our case, where we just found an error of 17%, the error
now should shrink to 1.7%.  Let's test that!

*Carol*: Easy.  I'll change the line

 :inccode: .euler_circular_1000_steps.rb-2

in <tt>euler_circular_1000_steps.rb</tt> to:

 :inccode: .euler_circular_10000_steps.rb-2

and put that code in <tt>euler_circular_10000_steps.rb</tt>, to indicate that
we are now taking 1,000 steps per time unit, 10,000 time steps in total.
Time to run it!

 :commandoutput: ruby euler_circular_10000_steps.rb > euler_circular_10000_steps.out
 :commandoutput: head -5 euler_circular_10000_steps.out
 :commandoutput: tail -5 euler_circular_10000_steps.out

*Dan*: Those numbers are _very_ different from the earlier ones . . .

*Erica*: Ah, but of course!  To come back to the same place, after
making the time step ten times smaller, we have to take ten times as
many steps!

*Carol*: Of course indeed!  Okay, I'll change the line

 :inccode: .euler_circular_10000_steps.rb-3

in <tt>euler_circular_10000_steps.rb</tt> to:

 :inccode: .euler_circular_10000_steps_ok.rb-3

and call that file <tt>euler_circular_10000_steps_ok.rb</tt>.

*Dan*: Your file names are growing again without bounds, and I don't
like having so very many different files lying around.

*Carol*: As long as we're debugging, I'd prefer to have many files,
so that we can always backtrack to earlier versions.  We can clean up
the mess later.

*Dan*: Okay, try again:

 :commandoutput: ruby euler_circular_10000_steps_ok.rb > euler_circular_10000_steps_ok.out
 :commandoutput: head -5 euler_circular_10000_steps_ok.out
 :commandoutput: tail -5 euler_circular_10000_steps_ok.out

*Dan*: Great!  Time for Pythagoras again:
<tex>$\sqrt{0.925\cdot0.925+0.430\cdot0.430}\approx 1.020$</tex>.

*Carol*: A 2% error, about a factor ten smaller than the 17% error
we had before.  We're getting there!

== An Even Better Orbit

*Erica*: And we should get a much better picture now.

*Carol*: Here it is, fig. ref(euler_circular_10000_steps_ok).

 :command: ruby euler_circular_10000_steps_ok.rb > euler_circular_10000_steps_ok.out
 :commandinput: gnuplot END
set term post eps
set output "euler_circular_10000_steps_ok.ps"
set size ratio -1
plot "euler_circular_10000_steps_ok.out"
quit
END

:figure: euler_circular_10000_steps_ok.ps 10cm euler_circular_10000_steps_ok
Fifth attempt at integrating the two-body problem: looking even better.

*Erica*: Wonderful!  You can hardly see the deviation from a circle.

*Dan*: Yes, the particles almost cover their own tracks, the second time
around.

*Carol*: You mean the particle: we're integrating a one-body problem.

*Dan*: Well, the distance between the two particles is what is plotted,
so I feel I can talk about particles.

*Erica*: And I think you're both right.  Stop arguing, you guys!
Let's go back to the elliptic case, the one we started with, remember?

== The Same Problem

*Carol*: Sure, I remember that.  All we have to do is to take
the file <tt>euler_circular.rb</tt> and make the initial velocity half
as large, by changing the line:

  :inccode: .euler_circular_10000_steps.rb-4

into:

  :inccode: .euler.rb-4

*Dan*: But that will be the same file as we started with, <tt>euler.rb</tt>.

*Carol*: Ah, yes, of course, I had forgotten already.  And in that case,
the orbit exploded.

*Dan*: Let's see it again.  Now that we seem to understand the circular case,
perhaps we can figure out what went wrong in the elliptic case.

*Carol*: Okay, here we go again:

 :commandoutput: ruby euler.rb > euler.out

And here is the plot once more, in fig ref(euler):

 :command: ruby euler.rb > euler.out
 :commandinput: gnuplot END
set term post eps
set output "euler.ps"
set size ratio -1
plot "euler.out"
quit
END

:figure: euler.ps 10cm euler
A rerun of the second attempt at integrating the two-body problem.

== Reasons for Failure

*Erica*: Let us take a moment to evaluate
what we have learned.  We know now how small the steps have to be to
get a reasonable convergence for a circular orbit.  And we can see in
figure ref(euler) that the steps get far larger toward the
left of the figure.

In fact, even when the steps start off with a reasonably small size at
the right hand side, by the time we have reached the left, the steps
are so large that even a circular orbit would not reach convergence if
we would everywhere use such large steps!

*Dan*: Why do the steps get so large, all of a sudden?

*Erica*: Because the particles get very close together.  Notice that the 
left-most part of the orbit is also the point in the orbit that is closest
to the origin, the place where <tex>$x=y=0$</tex>.  This is called the
_pericenter_ of an elliptic orbit.  This word is derived from the Greek
<tex>$\pi \epsilon \rho \iota$</tex><i>(peri)</i> meaning `around' or `near'.

You see, we started off with a speed smaller than the speed required for
a circular orbit, in fact, we had only have of that speed.  So the particles
started to fall toward each other right away, and IF we would have computed
the orbit correctly, the two particles would have returned to the
exact same spot after one revolution, just as we finally managed to
see in the circular case when we took very small steps.

*Carol*: So the initial position is then the place in the orbit where the
particles are furthest away from each other?

*Erica*: Yes, indeed!  And that point is called the apocenter, from the Greek
<tex>$\alpha \pi o$</tex> <i>(apo)</i> meaning `far (away) from'.
Well, I am willing to bet that a smaller time step will cure all of
our problems.

*Dan*: Seeing is believing.  Can you show us, Carol?

== Signs of Hope

*Carol*: Here we go, a ten times smaller step size in
<tt>euler_elliptic_10000_steps.rb</tt>; I'll plot the result in fig.
ref(euler_elliptic_10000_steps).

 :commandoutput: ruby euler_elliptic_10000_steps.rb > euler_elliptic_10000_steps.out
 :commandinput: gnuplot END
set term post eps
set output "euler_elliptic_10000_steps.ps"
set size ratio -1
plot "euler_elliptic_10000_steps.out"
quit
END

:figure: euler_elliptic_10000_steps.ps 10cm euler_elliptic_10000_steps
Sixth attempt at integrating the two-body problem: signs of hope.

*Dan*: I must admit, you may both have been right: at least now the particles
are completing a couple orbits that sort-of look elliptical, even though
the errors are still large. But at least they don't fly off to infinity
like in a slingshot.

*Erica*: Yes, I think we're getting to the bottom of all this, finally.

*Dan*: But we'd better make sure, and use even smaller steps.

*Carol*: Will do!
