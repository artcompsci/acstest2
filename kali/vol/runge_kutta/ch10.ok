= CHAPTER: A Special Treatment for a Special Second-Order Differential Equation

It turns out that we can do a lot better, in the case of our special
second-order differential equation

:equation:
{d^2x \over dt^2} = f(x).

Instead of simply treating it as a set of two coupled first-order
differential equations, we can exploit the fact that the right-hand
side does not depend on <tex>$v$</tex>.  This will allow us to construct
partitioned schemes {\bf [explain the notion of partitioned RK schemes]}.
Before we show this, let us first gather
some useful expressions, starting with the two first-order equations

:equation:
\left\{ \begin{array}{lcl}
{\displaystyle {dx \over dt}} &=& v \\
\phantom{1}&\phantom{1}&\phantom{1} \\
{\displaystyle {dv \over dt}} &=& f(x)
\end{array} \right.

As before, we expand the position and the velocity of the orbit in
Taylor series:

:eqnarray:
x_1 &=& x_0 + v_0\tau + \half a_0\tau^2 + \one{6} j_0\tau^3 +
\one{24} s_0\tau^4 + \one{120} c_0\tau^5 + \one{720} p_0\tau^6
+ O(\tau^7) \ \ \ \ \ \ \ \    \\
v_1 &=& v_0 + a_0\tau + \half j_0\tau^2 + \one{6} s_0\tau^3 +
\one{24} c_0\tau^4 + \one{120} p_0\tau^5 + O(\tau^6)

and when we differentiate the set of differential equations several
times, we obtain the following equations:

:eqnarray:
v_0 &=& v(0) \ \ = \ \ v_0 \\
a_0 &=& f(x(0)) \ \ = \ \ f(x_0) \ \ = \ \ f_0 \\
j_0 &=& \dot a_0 \ \ = \ \ {d \over dt} f_0
\ \ = \ \ {df_0 \over dx} {dx \over dt}
\ \ = \ \ f_0' v_0                         \\
s_0 &=& \dot j_0 \ \ = \ \ f_0'' v_0^2 + f_0' f_0  \\
c_0 &=& \dot s_0 \ \ = \ \ f_0''' v_0^3 + 3f_0'' f_0 v_0 +
(f_0')^2 v_0   \\ 
p_0 &=& \dot c_0 \ \ = \ \ f_0'''' v_0^4 + 6f_0''' f_0 v_0^2 +
f_0''\left\{3f_0^2 + 2f_0' v_0^2\right\} + (f_0')^2 f_0

= New Force Evaluations

== One Force Evaluation per Step

%\subsubsubsection{An Immediate Force Evaluation}
{\bf 4.1.1.1. An Immediate Force Evaluation}

In the case of a first-order differential equation, at the start of
our integration we can only evaluate the right-hand side at time zero,
at the beginning of the integration time step.  If we simply following
that example, we start with:

:equation:
k_1 = f(x_0)

This leads to the following dimensionally correct expressions:

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \alpha_1 k_1\tau^2  \\
v_1 &=& v_0 + \beta_1 k_1\tau   \label{array1a}

Comparing this with

:equation:
x_1 = x_0 + v_0\tau + \half a_0\tau^2
+ \one{6} j_0\tau^3  + O(\tau^4) \label{taylor4x}

and

:equation:
v_1 = v_0 + a_0\tau + \half j_0\tau^2
+ \one{6} s_0\tau^3  + O(\tau^4) \label{taylor4v}

we find for the <tex>$O(\tau)$</tex> terms that <tex>$\beta_1 = 1$</tex>.

Going to second order in <tex>$\tau$</tex> we require from Eq. (\ref{taylor4x})
that <tex>$\alpha_1 = \half$</tex>.  However, Eq. (\ref{taylor4v}) tells us that

:equation:
j_0 = f_0' v_0 = 0

which cannot be true for general <tex>$f$</tex> and <tex>$v_0$</tex>.  Our conclusion is
that the standard treatment only leads to a first-order correct
algorithm, which is of course the forward Euler algorithm:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau \\
v_1 &=& v_0 + k_1 \tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)
\end{array} \right.

%\subsubsubsection{A Delayed Force Evaluation}

{\bf 4.1.1.2. A Delayed Force Evaluation}

Given the special form of our second-order differential equation, it
is not necessary to start with a force evaluation at time zero.  The
first equation in the set

:equation:
\left\{ \begin{array}{lcl}
{\displaystyle {dx \over dt}} &=& v \\
\phantom{1}&\phantom{1}&\phantom{1} \\
{\displaystyle {dv \over dt}} &=& f(x)
\end{array} \right.

allows us to make a first-order prediction of the position, as:

:equation:
x(t) = x_0 + v_0 t + O(t^2)

which in turn allows us to postpone the first force evaluation to this
non-zero time:

:equation:
\dot v(t) = f(t) = f(x_0 + v_0 t + O(t^2)) = 
f(x_0 + v_0 t) + O(t^2).

Note that this trick is not possible for a general force term that
would depend on velocity as well.  In that case, the last equation
would read

:equation:
\dot v(t) = f(x(t), v(t)) = f(x_0 + v_0 t, v_0 + a_0 t) = 
f(x_0 + v_0 t, v_0 + f_0 t)

which would mean that we need an initial force evaluation <tex>$f_0$</tex> at
time zero, before we can perform a subsequent force evaluation at time <tex>$t$</tex>.

== xxx

Let us exploit this extra freedom, for our special differential equation,
by repeating our previous analysis for a delayed force evaluation.
Our first force evaluation can now take place at time <tex>$t = \eta_1 \tau$</tex>
where <tex>$\eta_1$</tex> is a free parameter.  Using the linear extrapolation of
the position, as sketched above, we obtain:

:equation:
k_1 = f(x_0 + \eta_1 v_0 \tau) \label{aha}

This leads to the following dimensionally correct expressions:

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \alpha_1 k_1\tau^2  \\
v_1 &=& v_0 + \beta_1 k_1\tau   \label{array1b}

If we expand <tex>$k_1$</tex> to first order in <tex>$\tau$</tex>, we obtain:

:equation:
k_1 = f_0 + \eta_1 f_0' v_0 \tau

Eq. (\ref{array1b}) can thus be written as:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \alpha_1 f_0 \tau^2 
+ \alpha_1 \eta_1 f_0' v_0 \tau^3 + O(\tau^4)    \\
v_1 &=& v_0 + \beta_1 f_0\tau + \beta_1 \eta_1 f_0' v_0 \tau^2 + O(\tau^3)
\end{array} \right.

Comparing this with

:equation:
x_1 = x_0 + v_0\tau + \half a_0\tau^2
+ \one{6} j_0\tau^3  + O(\tau^4) \label{taylor3x}

let us first consider the <tex>$O(\tau^2)$</tex> terms, which leads to the
requirement:

:equation:
a_0 = f_0  = 2 \alpha_1 f_0

which leads to

:equation:
\alpha_1 = \half

Similarly, we can use the Taylor series for <tex>$v$</tex>:

:equation:
v_1 = v_0 + a_0\tau + \half j_0\tau^2
+ \one{6} s_0\tau^3  + O(\tau^4) \label{taylor3v}

Considering the <tex>$O(\tau)$</tex> term, we have:

:equation:
a_0 = f_0  = \beta_1 f_0

which leads to

:equation:
\beta_1 = 1

Considering the <tex>$O(\tau^2)$</tex> terms, we have:

:equation:
j_0 = f_0' v_0 = 2 \beta_1 \eta_1 f_0' v_0

This implies:

:equation:
\eta_1 = \half

In this way, all three free parameters are fixed, by requiring the
algorithm to be second-order in <tex>$O(\tau)$</tex> in both position and velocity.

Could it be that we are in luck, and that this fixed solution can give
us expressions for <tex>$x$</tex> and <tex>$v$</tex> that are also third-order correct in <tex>$O(\tau)$</tex>?
Let us start with the position equation.  This would require:

:equation:
j_0 = f_0' v_0 = 6 \alpha_1 \eta_1 f_0' v_0

Alas, since we are forced to use <tex>$\alpha_1 = \eta_1 = \half$</tex>, the
coefficient on the right-hand side is <tex>$3/2$</tex> while the one on the
left-hand side is <tex>$1$</tex>.  We have no freedom left, so this equation has
no solutions for a general function <tex>$f$</tex> and a general initial velocity <tex>$v_0$</tex>.

%\subsubsubsection{Verlet-St\"ormer-Delambre Scheme}

{\bf 4.1.1.3. Verlet-St\"ormer-Delambre Scheme}

Using one evaluation of the right-hand side of the differential equation,
we have thus arrived at the following second-order integration scheme:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \half k_1 \tau^2  \\
v_1 &=& v_0 + k_1 \tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0 + \half v_0 \tau)
\end{array} \right.       \label{verlet}

Even though the equation for the velocity looks first-order, it is
actually second-order accurate, through the clever choice of time at
which the right-hand side of the differential equation is evaluated,
namely in between the times at which <tex>$v_0$</tex> and <tex>$v_1$</tex> are determined.

In fact, this scheme is nothing else than the good old leapfrog
algorithm, also known as the Verlet-St\"ormer-Delambre scheme, as we
will show now.

Define

:equation:
x_{1/2} \equiv x_0 + \half v_0 \tau

and

:equation:
v_{1/2} \equiv  v_0 + \half f_{1/2} \tau

where

:equation:
f_{1/2} \equiv f(x_{1/2}) = f(x_0 + \half v_0 \tau)

Our new scheme can then be written as

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_{1/2} \tau \\
v_1 &=& v_0 + f_{1/2} \tau
\end{array} \right.

Alternatively, we can express the first of these equations in terms of

:eqnarray:
x_{3/2} &=&  x_1 + \half v_1 \tau               \nonumber \\
&=& \left( x_0 + v_0\tau + \half f_{1/2}\tau^2 \right) +
\half \left( v_0 + f_{1/2}\tau \right) \tau            \nonumber \\
&=& x_{1/2} + \left( v_0 + f_{1/2}\tau \right) \tau            \nonumber \\
&=& x_{1/2} + v_1\tau

We have thus derived at expressions that show the leapfrog nature of
the algorithm most clearly:

:equation:
\left\{ \begin{array}{lcl}
x_{3/2} &=& x_{1/2} + v_1 \tau \\
v_1 &=& v_0 + f_{1/2} \tau
\end{array} \right.

This representation shows clearly that the equations are fully time
symmetric.  This fact was rather hidden in the original formulation,
eqs. (\ref{verlet}).  However, if we explicitly take a step forward
and then another step backward, using eqs. (\ref{verlet}), we can
recover the time symmetry inherent in these equations, as follows.
Let us denote the resulting position and velocity by <tex>$\{x_{-0}, v_{-0}\}$</tex>,
which are obtained from <tex>$\{x_{1}, v_{1}\}$</tex> by taking a time step with
size <tex>$-\tau$</tex>.  Our task is to show that <tex>$\{x_{-0}, v_{-0}\}$</tex> actually
coincide with <tex>$\{x_{0}, v_{0}\}$</tex>, not only to second order, as would
be guaranteed in any second order scheme, but in fact to all orders in
<tex>$\tau$</tex>.

:eqnarray:
x_{-0} &=& x_1 - v_1 \tau + \half f(x_1 - \half v_1 \tau) \tau^2 \nonumber \\ 
&=& \left\{ x_0 + v_0 \tau + \half f(x_0 + \half v_0 \tau) \tau^2 \right\}
-\left\{v_0 + f(x_0 + \half v_0 \tau) \tau\right\}\tau +           \nonumber \\
&&\quad
\half f(\{x_0 + v_0 \tau + \half f(x_0 + \half v_0 \tau) \tau^2\}
- \half \{v_0 + f(x_0 + \half v_0 \tau) \tau\} \tau) \tau^2        \nonumber \\
&=& x_0 - \half f(x_0 + \half v_0 \tau) \tau^2 +       \nonumber \\
&&\quad
\half f(x_0 + v_0 \tau + \half f(x_0 + \half v_0 \tau) \tau^2
- \half v_0 \tau -\half f(x_0 + \half v_0 \tau) \tau^2) \tau^2     \nonumber \\
&=& x_0 - \half f(x_0 + \half v_0 \tau) \tau^2 +       \nonumber \\
&&\quad
\half f(x_0 + \half v_0 \tau) \tau^2                            \nonumber \\ 
&=& x_0

:eqnarray:
v_{-0} &=& v_1 - f(x_1 - \half v_1 \tau) \tau                     \nonumber \\
&=& \left\{v_0 + f(x_0 + \half v_0 \tau) \tau\right\}             \nonumber \\
&&\quad - f(\{x_0 + v_0 \tau + \half f(x_0 + \half v_0 \tau) \tau^2\}
- \half \{v_0 + f(x_0 + \half v_0 \tau) \tau\} \tau     \nonumber \\
&=& v_0

Finally, we can also write

:eqnarray:
x_{3/2} &=&  x_{1/2} + v_1 \tau           \nonumber \\
&=& x_{1/2} + v_0 \tau + f_{1/2} \tau^2           \nonumber \\
&=& x_{1/2} + v_{1/2} \tau + \half f_{1/2} \tau^2

and

:eqnarray:
v_{3/2} &=&  v_1 + \half f_{3/2} \tau           \nonumber \\
&=& v_0 + f_{1/2} \tau + \half f_{3/2} \tau           \nonumber \\
&=& v_{1/2} + \half \left( f_{1/2} + f_{3/2} \right) \tau

We thus find

:equation:
\left\{ \begin{array}{lcl}
x_{3/2} &=& x_{1/2} + v_{1/2}\tau + \half f_{1/2} \tau^2           \\
v_{3/2} &=& v_{1/2} + \half \left( f_{1/2} + f_{3/2} \right) \tau
\end{array} \right.

We can now shift our zero point in time by half a time step, to arrive
at the more convenient notation:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0\tau + \half f_0 \tau^2           \\
v_1 &=& v_0 + \half ( f_0 + f_1 ) \tau
\end{array} \right.

Comparing this with our starting point, eqs. (\ref{verlet}):

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \half k_1 \tau^2  \nonumber \\
v_1 &=& v_0 + k_1 \tau                 \nonumber  \\
\phantom{1}&\phantom{1}&\phantom{1}    \nonumber  \\
k_1 &=& f(x_0 + \half v_0 \tau)        \nonumber
\end{array} \right.       

we have arrived at the alternative formulation:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \half k_1 \tau^2  \\
v_1 &=& v_0 + (k_1 + k_2)\tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)        \\
k_2 &=& f(x_0 + v_0 + \half k_1 \tau^2)
\end{array} \right.

The second formulation seems rather different, in that it requires two
force calculations.  Note, however, that the position at which the
second force calculation takes place is {\it exactly} the same
position at which the first force calculation for the next step will
take place.  Therefore, the second force calculation of each step can
be recycled as the first force calculation of the next step.
Effectively, we thus use only one force calculation per step.  This
trick is known in the literature as FSAL, short for First-Same-As-Last.
We will come back to this point below.

%\subsubsubsection{An Historical Note}

{\bf 4.1.1.4. An Historical Note}

Almost everywhere in the literature, Runge-Kutta methods are assumed
to start with <tex>$k_1 = f_0$</tex>: letting the first evaluation of the
right-hand side of the differential equation take place at the very
beginning of the step.  This is necessary in the general case, but not
for the special case of a second-order differential equation where
there is no velocity dependence in the force term.  The only place we
have found so far in the literature, which mentions the possibility of
starting with the force evaluation already at a later time is a
paragraph in <tex>Nystr\"om</tex> (1925),
the original paper introducing what is
now known as the <tex>Runge-Kutta-Nystr\"om</tex> algorithms.

In his section 2, p. 7, near the bottom, he remarks that, to be
consistent, we should allow the freedom to write a general expression
of the type we have done above in Eq. (\ref{aha}).  He then adds that
he decided against considering this extra freedom, for two reasons,
both pragmatic, the first related to speed of execution of the
algorithms, the second related to speed of derivation of the
expressions fot the algorithms.  Here are his arguments.

First of all, we often know already the force evaluation at the
beginning of the step, from the last stage of the calculation of the
previous step (at least approximately; and using even earlier force
calculations, we can further improve the accuracy, without having to
perform new force evaluations).  Secondly, he adds, starting from such
a general expression has led him to such unwieldy expressions that he
was more or less forced to put <tex>$\eta_1 = 0$</tex> in his equivalent to our
Eq. (\ref{aha}).

Of course, current availability of algebraic manipulation programs
have now invalidated his second argument.  Curiously, all text books
seem to propagate the simplifying assumption <tex>$\eta_1 = 0$</tex> without
questioning what the basis for this assumption may have been.

== Two Force Evaluations per Step

%\subsubsubsection{General Form}

{\bf 4.1.2.1. General Form}

If we allow two evaluations of the right-hand side of the differential
equation, we can work with the following general expression that is
dimensionally correct

:eqnarray:
k_1 &=& f(x_0 + \eta_{11} v_0\tau)    \\
k_2 &=& f(x_0 + \eta_{21} v_0\tau + \eta_{22} k_1 \tau^2)

which leads to the following expressions for position and velocity steps:

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \left(\alpha_1 k_1 + \alpha_2 k_2\right) \tau^2  \\
v_1 &=& v_0 + \left(\beta_1 k_1 + \beta_2 k_2\right) \tau   \label{array2a}

Substituting the <tex>$k_i$</tex> values, these equations expand into

:equation:
\left\{ \begin{array}{lcl}
x_1 &=&
x_0 \ +\  v_0 \tau \ +\  \alpha_1 f(x_0+\eta_{11} v_0 \tau) \tau^2\ +\  \\
\phantom{1}&\phantom{1}&\quad\quad\quad
\alpha_2 f(x_0+\eta_{21} v_0 \tau +
\eta_{22} f(x_0+\eta_{11} v_0 \tau) \tau^2) \tau^2 \\
\phantom{1}&\phantom{1}&\phantom{1} \\
v1 &=&
v_0\ +\  \beta_1 f(x_0+\eta_{11} v_0 \tau)\tau \ +\  \\
\phantom{1}&\phantom{1}&\quad\quad\ \ 
\beta_2 f(x_0+\eta_{21} v_0\tau+\eta_{22} f(x_0+\eta_{11} v_0 \tau) \tau^2)\tau
\end{array} \right.

So far, everything is still the exact prescription, given in the
original algorithmic scheme.  If we now expand the expressions in
powers of <tex>$\tau$</tex>, we get:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=&
x_0 \ +\  v_0 \tau \ +\  (\alpha_1 + \alpha_2)f_0\tau^2\ +\  \\
\phantom{1}&\phantom{1}&\quad\quad\quad\quad\quad\quad\ 
(\alpha_1\eta_{11}+\alpha_2\eta_{21})f_0'v_0 \tau^3 \ +\  O(\tau^4) \\
\phantom{1}&\phantom{1}&\phantom{1} \\
v1 &=&
v_0\ +\  (\beta_1+\beta_2) f_0\tau \ +\  
(\beta_1\eta_{11}+\beta_2\eta_{21})f_0'v_0 \tau^2 \ +\   \\
\phantom{1}&\phantom{1}&\quad\quad\ \ \ 
(\half(\beta_1\eta_{11}^2+\beta_2\eta_{21}^2)f_0''v_0^2 +
\beta_2\eta_{22}f_0f_0')\tau^3\ +\  O(\tau^4) \\
\end{array} \right.

This should be equal to the Taylor series:

:eqnarray:
x_1 &=& x_0 + v_0\tau + \half a_0\tau^2 + \one{6} j_0\tau^3 +
\one{24} s_0\tau^4 + O(\tau^5) \ \ \ \ \ \ \ \    \\
v_1 &=& v_0 + a_0\tau + \half j_0\tau^2 + \one{6} s_0\tau^3 +
\one{24} c_0\tau^4 + O(\tau^5)

This leads to the following conditions:

:equation:
\left\{ \begin{array}{lcl}
\phantom{1}&\phantom{1}&
\alpha_1 + \alpha_2 = \half            \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\alpha_1\eta_{11}+\alpha_2\eta_{21} = {\displaystyle \frac {1}{6}}      \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_1 + \beta_2 = 1                            \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_1\eta_{11}+\beta_2\eta_{21} = \half            \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_1\eta_{11}^2+\beta_2\eta_{21}^2 = {\displaystyle \frac {1}{3}}    \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_2\eta_{22} = {\displaystyle \frac {1}{6}}
\end{array} \right.

These can be solved in terms of <tex>$\eta_{11}$</tex>, as follows:

:equation:
\left\{ \begin{array}{lcl}
\phantom{1}&\phantom{1}&
\eta_{21} = {\displaystyle {3\eta_{11}-2 \over 3(2\eta_{11}-1)}}            \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\eta_{22} = {\displaystyle {2(3\eta_{11}^2 - 3\eta_{11} + 1)\over
9(4\eta_{11}^2-4\eta_{11}+1)}}      \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\alpha_1 = {\displaystyle
{-\eta_{11}+1 \over 4(3\eta_{11}^2 - 3\eta_{11} + 1)}}           \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\alpha_2 = {\displaystyle 
{6\eta_{11}^2-5\eta_{11}+1 \over 4(3\eta_{11}^2 - 3\eta_{11}+1)}}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_1 = {\displaystyle {1\over 4(3\eta_{11}^2 - 3\eta_{11} + 1)}}    \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\phantom{1}&\phantom{1}&
\beta_2 = {\displaystyle 
{3(4\eta_{11}^2-4\eta_{11}+1) \over 4(3\eta_{11}^2 - 3\eta_{11}+1)}}
\end{array} \right.

%\subsubsubsection{Examples}

{\bf 4.1.2.2. Examples}

If we take the standard assumption <tex>$\eta_{11} = 0$</tex>, we get:

:equation:
\left\{
\eta_{11} = 0                     \  ; \ 
\eta_{21} = {\textstyle \frac {2}{3}}            \  ; \ 
\eta_{22} = {\textstyle \frac {2}{9}}            \  ; \ 
\alpha_1 = \one{4}            \  ; \ 
\alpha_2 = \one{4}            \  ; \ 
\beta_1 = \one{4}            \  ; \ 
\beta_2 = {\textstyle \frac {3}{4}}
\right\}                               \label{standard1}

This produces exactly what <tex>Nystr\"om</tex> (1925) gives this as his simplest
algorithm:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \one{4} \left(k_1 + k_2\right) \tau^2  \\
v_1 &=& v_0 + \one{4}\left(k_1 + 3k_2 \right)\tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0) \\
k_2 &=& f(x_0 + {\textstyle\frac{2}{3}} v_0 \tau + 
{\textstyle\frac{2}{9}} k_1\tau^2)
\end{array} \right.

Henrici (1962) also lists this algorithm, refering back to
<tex>Nystr\"om</tex> (1925).
However, Henrici's expressions contain a typo: he lists the last
coefficient as <tex>$\one{3}k_1\tau^2$</tex>.
<tex>Nystr\"om</tex> does list the term correctly,
as <tex>${\textstyle\frac{2}{9}} k_1\tau^2$</tex>.

If we try the other obvious choice <tex>$\eta_{11} = \half$</tex>, we find that
some of the coefficients diverge: <tex>$\eta_{21} = \eta_{21} = \infty$</tex>.
With two force evaluations, it seems not to be possible to let the
first one start right in the middle.

There is a natural choices that leads to relatively
simple expressions for the coefficients: <tex>$\eta_{11}={1\over3}$</tex>.
Here the first force evaluation takes place after one third of the
duration of the time step.  In this case we get:

:equation:
\left\{
\eta_{11} = \one{3}                     \  ; \ 
\eta_{21} = 1                             \  ; \ 
\eta_{22} = {\textstyle \frac {2}{3}}       \  ; \ 
\alpha_1 = \one{2}            \  ; \ 
\alpha_2 = 0                 \  ; \ 
\beta_1 = {\textstyle \frac {3}{4}}           \  ; \ 
\beta_2 = \one{4} 
\right\}

This leads to the following equations:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \one{2} k_1 \tau^2  \\
v_1 &=& v_0 + \one{4}\left(3k_1 + k_2 \right)\tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0 + {\textstyle\frac{1}{3}} v_0 \tau) \\
k_2 &=& f(x_0 + v_0 \tau + 
{\textstyle\frac{2}{3}} k_1\tau^2)
\end{array} \right.

A complementary choise is <tex>$\eta_{11}={2\over3}$</tex>, for which the first
force evaluation takes place after two third of the duration of the
time step.  In this case we get:

:equation:
\left\{
\eta_{11} = {\textstyle \frac {2}{3}}                     \  ; \ 
\eta_{21} = 0                             \  ; \ 
\eta_{22} = {\textstyle \frac {2}{3}}       \  ; \ 
\alpha_1 = \one{4}            \  ; \ 
\alpha_2 = \one{4}            \  ; \ 
\beta_1 = {\textstyle \frac {3}{4}}           \  ; \ 
\beta_2 = \one{4} 
\right\}

This leads to the following equations:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \one{4}(k_1 + k_2)\tau^2  \\
v_1 &=& v_0 + \one{4}\left(3k_1 + k_2 \right)\tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0 + {\textstyle\frac{2}{3}} v_0 \tau) \\
k_2 &=& f(x_0 + {\textstyle\frac{2}{3}} k_1\tau^2)
\end{array} \right.

There seem to be no other sets of simple coefficients.
We might be tempted to try, say, <tex>$\eta_{11}={1\over4}$</tex>,
but in that case we get the much more complicated looking set:

:equation:
\left\{
\eta_{11} = \one{4}                     \  ; \ 
\eta_{21} = {\textstyle \frac {5}{6}}                             \  ; \ 
\eta_{22} = {\textstyle \frac {7}{18}}       \  ; \ 
\alpha_1 = {\textstyle \frac {3}{7}}            \  ; \ 
\alpha_2 = \one{14}                 \  ; \ 
\beta_1 = {\textstyle \frac {4}{7}}           \  ; \ 
\beta_2 = {\textstyle \frac {3}{7}}
\right\}

This leads to the following equations:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau + \one{14} \left(6k_1 + k_2\right) \tau^2  \\
v_1 &=& v_0 + \one{7}\left(4k_1 + 3k_2 \right)\tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0 + {\textstyle\frac{1}{4}} v_0 \tau) \\
k_2 &=& f(x_0 + {\textstyle\frac{5}{6}} v_0 \tau + 
{\textstyle\frac{7}{18}} k_1\tau^2)
\end{array} \right.

= Recycling Force Evaluations

== One Force Evaluation per Step

%\subsubsubsection{General Form}
{\bf 4.2.1.1. General Form}

:eqnarray:
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + v_0\tau + \eta k_1 \tau^2)

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \left(\alpha_1 k_1 + \alpha_2 k_2\right) \tau^2  \\
v_1 &=& v_0 + \left(\beta_1 k_1 + \beta_2 k_2\right) \tau

3rd order not possible: in Eq. (\ref{standard1}) we see that starting
the first force calculation at time zero implies that the coefficient
for <tex>$v_0$</tex> in <tex>$k_2$</tex> should be <tex>$2/3$</tex>, and not <tex>$1$</tex> as we insist upon above.

This means that we only have to expand up to powers in <tex>$\tau^2$</tex>.

with

:equation:
k_2 = f_0 + v_0f_0'\tau + O(\tau^2)

we get

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \left(\alpha_1 + \alpha_2 \right) f_0\tau^2 
+ O(\tau^3)                                    \nonumber \\
v_1 &=& v_0 + \left(\beta_1 + \beta_2\right)f_0 \tau
+\beta_2v_0f_0'\tau^2+ O(\tau^3)

This has to be equal to

:eqnarray:
x_1 &=& x_0 + v_0 \tau + \half f_0\tau^2 + O(\tau^3)           \nonumber \\
v_1 &=& v_0 + f_0 \tau +\half v_0f_0'\tau^2+ O(\tau^3)

This implies:

:equation:
\fbox{
$\displaystyle{
\alpha_1 + \alpha_2 = \half
}$
}

and

:equation:
\fbox{
$\displaystyle{
\beta_1 + \beta_2 = 1
}$
}

and

:equation:
\fbox{
$\displaystyle{
\beta_2 = \half
}$
}

From the last two, we get <tex>$\beta_1 = \half$</tex>.  Two parameter freedom,
with <tex>$\alpha \equiv \alpha_2$</tex>:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau +
\half\left((1-\alpha)k_1 + \alpha k_2\right) \tau^2    \\
v_1 &=& v_0 + \half\left(k_1 + k_2\right) \tau  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + v_0\tau + \eta k_1 \tau^2)
\end{array} \right.

%\subsubsubsection{Second Order Recycle Conditions}

{\bf 4.2.1.2. Second Order Recycle Conditions}

Now insist that <tex>$\tilde x_1 - x_1 = O(\tau^2)$</tex>:

:eqnarray:
\tilde x_1 &=& x_0 + v_0 \tau + \eta k_1 \tau^2        \nonumber\\
x_1 &=& x_0 + v_0 \tau +
\half\left((1-\alpha)k_1 + \alpha k_2\right) \tau^2

Already okay.  So we are left with a two-parameter freedom.

For <tex>$\alpha = 0$</tex> and <tex>$\eta = \half$</tex>, simplest choice: leapfrog.

[check for which values time symmetry; 
presumably only for <tex>$\alpha = 0$</tex> and <tex>$\eta = \half$</tex>]

== Two Force Evaluations per Step

%\subsubsubsection{General Form}
{\bf 4.2.2.1. General Form}

:eqnarray:
k_1 &=& f(x_0)    \nonumber\\
k_2 &=& f(x_0 + \eta_{21}v_0\tau + \eta_{22} k_1 \tau^2)    \nonumber\\
k_3 &=& f(x_0 + v_0\tau + \eta_{32} k_1 \tau^2 + \eta_{33} k_2 \tau^2)

:eqnarray:
x_1 &=& x_0 + v_0 \tau
 + \left(\alpha_1 k_1 + \alpha_2 k_2 + \alpha_3 k_3\right) \tau^2  \nonumber \\
v_1 &=& v_0 + 
\left(\beta_1 k_1 + \beta_2 k_2 + \beta_3 k_3\right) \tau

Let us expand up to powers in <tex>$\tau^3$</tex>.

:equation:
k_2 = f_0 + \eta_{21}v_0f_0'\tau 
+ \left\{\eta_{22} f_0f_0' + \half \eta_{21}^2v_0^2f_0''\right\}\tau^2
+ O(\tau^3)

:equation:
k_3 = f_0 + v_0f_0'\tau 
+ \left\{\left(\eta_{32}+\eta_{33}\right) f_0f_0'
+ \half v_0^2f_0''\right\}\tau^2
+ O(\tau^3)

we get

:eqnarray:
x_1 &=& x_0 + v_0 \tau
+ \left(\alpha_1 + \alpha_2 + \alpha_3 \right) f_0\tau^2         \nonumber \\
&&+ \left(\alpha_2\eta_{21} + \alpha_3\right)v_0f_0'\tau^3
+ O(\tau^4)                

This has to be equal to

:equation:
x_1 = x_0 + v_0 \tau + \half f_0\tau^2
+\one{6}v_0f_0'\tau^3
 + O(\tau^4)

:equation:
\fbox{
$\displaystyle{
\alpha_1 + \alpha_2 + \alpha_3 = \half
}$
}

:equation:
\fbox{
$\displaystyle{
\alpha_2\eta_{21} + \alpha_3 = \one{6}
}$
}

:eqnarray:
v_1 &=& v_0 + \left(\beta_1 + \beta_2 + \beta_3\right)f_0 \tau 
+\left( \beta_2\eta_{21} + \beta_3\right)v_0f_0'\tau^2            \nonumber \\
&&
+ \left\{
\Big( \beta_2\eta_{22} + \beta_3(\eta_{32} +\eta_{33}) \Big)f_0f_0'
+ \half\left(\beta_2\eta_{21}^2 + \beta_3 \right)v_0^2f_0''
\right\}\tau^3                                                   \nonumber \\
&&+ O(\tau^4)

This has to be equal to

:equation:
v_1 = v_0 + f_0 \tau +\half v_0f_0'\tau^2
+\one{6}\left\{f_0f_0' +v_0^2f_0''\right\}\tau^3
+ O(\tau^4)

:equation:
\fbox{
$\displaystyle{
\beta_1 + \beta_2 + \beta_3 = 1
}$
}

:equation:
\fbox{
$\displaystyle{
\beta_2\eta_{21} + \beta_3 = \half
}$
}

:equation:
\fbox{
$\displaystyle{
\beta_2\eta_{21}^2 + \beta_3 = \one{3}
}$
}

:equation:
\fbox{
$\displaystyle{
\beta_2\eta_{22} + \beta_3(\eta_{32} + \eta_{33}) = \one{6}
}$
}

%\subsubsubsection{Third Order Recycle Conditions}

{\bf 4.2.2.2. Third Order Recycle Conditions}

Now insist that <tex>$\tilde x_1 - x_1 = O(\tau^3)$</tex>:

:eqnarray:
\tilde x_1 &=& x_0 + v_0 \tau +
\left(\eta_{32} k_1+\eta_{33} k_2\right) \tau^2 +O(\tau^3)        \nonumber\\
x_1 &=& x_0 + v_0 \tau + \half f_0\tau^2

:equation:
\fbox{
$\displaystyle{
\eta_{32} + \eta_{33} = \half
}$
}

seven equations for ten variables.

From the last two:

:equation:
\beta_2\eta_{22} + \half\beta_3 = \one{6}

Combining that with the equation above the two we just used:

:equation:
\beta_2\left(\half\eta_{21}^2-\eta_{22}\right) = 0

Two possibilities: <tex>$\beta_2=0$</tex> or <tex>$\eta_{22}=\half\eta_{21}$</tex>.
In the first case, <tex>$\beta_3 = \half$</tex> and <tex>$\beta_3 = \one{3}$</tex> from the
next to last equation and the one above that.  Contradiction.  Hence:

:equation:
\eta_{22}=\half\eta_{21}

Introduce <tex>$\alpha \equiv \alpha_2$</tex> and <tex>$\eta \equiv \eta_{21}$</tex>, and use
<tex>$\zeta \equiv \eta_{33}$</tex> as the third parameter.
Then

:equation:
\left\{ \begin{array}{lcl}
\alpha_1 &=& \one{3} + \alpha(\eta -1)  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\alpha_2 &=& \alpha                      \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\alpha_3 &=& \one{6} - \alpha\eta        \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_1 &=& {\displaystyle {3\eta -1 \over 6\eta}}       \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2 &=& {\displaystyle {1 \over 6\eta(1-\eta)}}     \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_3 &=& {\displaystyle {2-3\eta \over 6(1-\eta)}}     \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\eta_{21} &=& \eta                     \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\eta_{22} &=& \half\eta^2              \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\eta_{32} &=& \half - \zeta            \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\eta_{33} &=& \zeta                    \\
\end{array} \right.

So in general:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau
 + \left((\one{3} + \alpha(\eta -1)) k_1  + \alpha k_2
 + (\one{6} - \alpha\eta) k_3\right) \tau^2  \nonumber \\
v_1 &=& v_0 + 
\left({3\eta -1 \over 6\eta} k_1
 + {1 \over 6\eta(1-\eta)} k_2 + {2-3\eta \over 6(1-\eta)} k_3\right) \tau \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + \eta v_0\tau + \half\eta^2 k_1 \tau^2)    \\
k_3 &=& f(x_0 + v_0\tau +
((\half-\zeta) k_1 + \zeta k_2 )\tau^2)
\end{array} \right.             \label{threeparam}

Example: for <tex>$\alpha = \zeta=0$</tex>, <tex>$\eta=\half$</tex>:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau
 + \one{6} \left(2 k_1  + k_3\right) \tau^2   \\
v_1 &=& v_0 + \one{6}\left(k_1 +4k_2 + k_3\right) \tau \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + \half v_0\tau + \one{8} k_1 \tau^2)    \\
k_3 &=& f(x_0 + v_0\tau + \half k_1 \tau^2)
\end{array} \right.

Like trapezium rule for integration!

Another example: for <tex>$\alpha = \zeta=0$</tex>, <tex>$\eta=\one{3}$</tex>:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau
 + \one{6} \left(2 k_1  + k_3\right) \tau^2   \\
v_1 &=& v_0 + \one{4}\left(3k_2 + k_3\right) \tau \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + \one{3} v_0\tau + \one{18} k_1 \tau^2)    \\
k_3 &=& f(x_0 + v_0\tau + \half k_1 \tau^2)
\end{array} \right.

%\subsubsubsection{Exact Recycling}

{\bf 4.2.2.3. Exact Recycling}

So far, only pseudo-FSAL, or better: pseudo Runge Kutta!

Can we make it really FSAL Runge Kutta?

:equation:
\half - \zeta = \one{3} - \alpha(\eta-1)

:equation:
\zeta = \alpha

:equation:
\one{6} - \alpha\eta = 0

With the first two:

:equation:
\one{6} + \alpha\eta = 2\alpha

combining this with the third:

:equation:
\alpha = \one{6}

leading to 

:equation:
\zeta = \one{6}

but alas:

:equation:
\eta = 1

So this doesn't work: the coefficients for the <tex>$k_2$</tex> and <tex>$k_3$</tex> terms
in the expression for <tex>$v_1$</tex> in Eq. (\ref{threeparam}) blow up.

%\subsubsubsection{A Search for a Fourth Order Scheme}

{\bf 4.2.2.4. A Search for a Fourth Order Scheme}

Given that we have three free parameters left in our construction of a
recycling scheme that is third order correct, it is tempting to search
for a fourth-order scheme, based on only two new force calculations
per time step.  

Repeating the previous analysis to one order higher in <tex>$\tau$</tex>, we get

:eqnarray:
k_2 &=& f_0 + \eta_{21}v_0f_0'\tau 
+ \left\{\eta_{22} f_0f_0' + \half \eta_{21}^2v_0^2f_0''\right\}\tau^2  
 \nonumber \\
&&+ \left\{\eta_{21}\eta_{22}v_0f_0f_0''
+\one{6}\eta_{21}^3v_0^3f_0'''\right\}\tau^3
+ O(\tau^4)

:eqnarray:
k_3 &=& f_0 + v_0f_0'\tau 
+ \left\{\left(\eta_{32}+\eta_{33}\right) f_0f_0'
+ \half v_0^2f_0''\right\}\tau^2                  \nonumber \\
&&
+ \left\{ \eta_{21}\eta_{33}v_0\left(f_0'\right)^2
+ \left(\eta_{32}+\eta_{33}\right) v_0f_0f_0''
+ \one{6} v_0^3f_0'''\right\}\tau^3              \nonumber \\
&&+\  O(\tau^4)

we get

:eqnarray:
x_1 &=& x_0 + v_0 \tau
+ \left(\alpha_1 + \alpha_2 + \alpha_3 \right) f_0\tau^2  
+ \left(\alpha_2\eta_{21} + \alpha_3\right)v_0f_0'\tau^3          \nonumber \\
&&+ \left(\alpha_2\eta_{22}
+ \alpha_3\left(\eta_{32}+\eta_{33}\right) \right)f_0f_0'\tau^4
+ \half\left(\alpha_2\eta_{21}^2 + \alpha_3\right)v_0^2f_0''\tau^4 \nonumber \\
&&+\  O(\tau^5)

This has to be equal to

:equation:
x_1 = x_0 + v_0 \tau + \half f_0\tau^2
+\one{6}v_0f_0'\tau^3 + \one{24}f_0f_0'\tau^4 + \one{24}v_0^2f_0''\tau^4
 + O(\tau^5)

In addition to the previous conditions, we get the following two additional
requirements:

:equation:
\fbox{
$\displaystyle{
\alpha_2\eta_{22} + \alpha_3\left(\eta_{32}+\eta_{33}\right) = \one{24}
}$
}

:equation:
\fbox{
$\displaystyle{
\alpha_2\eta_{21}^2 + \alpha_3 = \one{12}
}$
}

Now:

:eqnarray:
v_1 &=& v_0 + \left(\beta_1 + \beta_2 + \beta_3\right)f_0 \tau 
+\left( \beta_2\eta_{21} + \beta_3\right)v_0f_0'\tau^2            \nonumber \\
&&
+ \left\{
\Big( \beta_2\eta_{22} + \beta_3(\eta_{32} +\eta_{33}) \Big)f_0f_0'
+ \half\left(\beta_2\eta_{21}^2 + \beta_3 \right)v_0^2f_0''
\right\}\tau^3                                                   \nonumber \\
&&
+ \left\{
\beta_3\eta_{21}\eta_{33}v_0\left(f_0'\right)^2
+ \Big( \beta_2\eta_{21}\eta_{22} + 
\beta_3(\eta_{32} +\eta_{33}) \Big)v_0f_0f_0''\right.          \nonumber \\
&&
\quad \ \ \left.
+\  \one{6}\left(\beta_2\eta_{21}^3 + \beta_3 \right)v_0^3f_0'''
\right\}\tau^4                                                   \nonumber \\
&&+ O(\tau^5)

This has to be equal to

:eqnarray:
v_1 &=& v_0 + f_0 \tau +\half v_0f_0'\tau^2
+\one{6}\left\{f_0f_0' +v_0^2f_0''\right\}\tau^3           \nonumber \\
&&
+\  \one{24}\left\{v_0\left(f_0'\right)^2 +
3v_0f_0f_0'' +v_0^3f_0'''\right\}\tau^4
+ O(\tau^5)

We get the additional equations:

:equation:
\fbox{
$\displaystyle{
\beta_2\eta_{21}^3 + \beta_3 = \one{4}
}$
}

:equation:
\fbox{
$\displaystyle{
\beta_2\eta_{21}\eta_{22} + \beta_3(\eta_{32} + \eta_{33}) = \one{8}
}$
}

:equation:
\fbox{
$\displaystyle{
\beta_3\eta_{21}\eta_{33} = \one{24}
}$
}

We have thus eleven conditions gathered so far for the ten
unknown parameters <tex>$\{\alpha_1, \alpha_2, \alpha_3, \beta_1, \beta_2,
\beta_3, \eta_{21}, \eta_{22}, \eta_{32}, \eta_{33}\}$</tex>.  {\it A priori}
we would expect to find no solutions in such an overdetermined system.
However, let's see how far we get when we try.  Let us list the
conditions here together:

:equation:
\left\{ \begin{array}{lcl}
\alpha_1 + \alpha_2 + \alpha_3 = \half  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\alpha_2\eta_{21} + \alpha_3 = \one{}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\alpha_2\eta_{21}^2 + \alpha_3 = \one{12}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\alpha_2\eta_{22} + \alpha_3\left(\eta_{32}+\eta_{33}\right) = \one{24}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_1 + \beta_2 + \beta_3 = 1        \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2\eta_{21} + \beta_3 = \half    \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2\eta_{21}^2 + \beta_3 = \one{3}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2\eta_{21}^3 + \beta_3 = \one{4}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2\eta_{22} + \beta_3(\eta_{32} + \eta_{33}) = \one{6}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_2\eta_{21}\eta_{22} + \beta_3(\eta_{32} + \eta_{33}) = \one{8}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_3\eta_{21}\eta_{33} = \one{24}
\end{array} \right.

Subtracting the 6th and 7th equation, we find

:equation:
\beta_2\eta_{21}(1-\eta_{21}) = \one{6}

and subtracting the 7th and 8th equation, we find

:equation:
\beta_2\eta_{21}^2(1-\eta_{21}) = \one{12}

Together, these two expressions imply

:equation:
\eta_{21}(1-\eta_{21}) = 2\eta_{21}^2(1-\eta_{21})

There are three solutions: <tex>$\eta_{21} = 0$</tex>, <tex>$\eta_{21} = 1$</tex>, and
<tex>$\eta_{21} = \half$</tex>.  The first two solutions can be discarded, because
they would imply that the left-hand side of the 6th, 7th, and 8th
equations above would all have the same value, contradicting the fact
that their right-hand sides have different values.  We thus find

:equation:
\eta_{21} = \half

With this result, we can use the remaining information in the 6th,
7th, and 8th equations above to determine the other two values:

:equation:
\beta_2 = \two{3}

:equation:
\beta_3 = \one{6}

The 5th equation gives us

:equation:
\beta_1 = \one{6}

Subtracting the 9th and 10th equation, we find

:equation:
\beta_2\eta_{22}(1-\eta_{21}) = \one{24}

and plugging in the values we have found so far gives us

:equation:
\eta_{22} = \one{8}

The 9th and 10th equation then give us:

:equation:
\eta_{32} + \eta_{33} = \half

Since the 11th equation gives us

:equation:
\eta_{33} = \half

we conclude that

:equation:
\eta_{32} = 0

We can now write the 2nd and 3rd equations as

:equation:
\half \alpha_2 + \alpha_3 = \one{6}

:equation:
\one{4} \alpha_2 + \alpha_3 = \one{12}

Subtraction those expressions gives us

:equation:
\one{4} \alpha_2 = \one{12}

or

:equation:
\alpha_2 = \one{3}

and plugging this back in the expressions above gives

:equation:
\alpha_3 = 0

The 1st equation then gives

:equation:
\alpha_1 = \one{6}

Remarkably, we have been able to solve the eleven equations for the
ten unknowns and found a consistent solution!  To summarize:

:equation:
\left\{ \begin{array}{lcl}
\alpha_1 = \one{6}  
&;&
\alpha_2 = \one{3}  
\quad \  ; \quad 
\alpha_3 = 0       \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\beta_1 =  \one{6}  
&;&
\beta_2 =  \two{3}  
\quad \  ; \quad 
\beta_3 =  \one{6}  \\
\phantom{1}&\phantom{1}&\phantom{1} \\
\eta_{21} = \half   
&;&
\eta_{22} =  \one{8}  
\quad ; \quad 
\eta_{32} =  0      
\quad ; \quad 
\eta_{33} = \half
\end{array} \right.

Not only that, it turns out that we get an additional bonus: these
solutions solve the previous relation for demanding the
<tex>$\tilde x_1 = x_1 + O(\tau^3)$</tex>, which was

:equation:
\eta_{32} + \eta_{33} = \half

We have thus found a consistent set of solutions for ten variables
satisfying twelve equations.  Could we be really lucky?  Could it be
that in fact <tex>$\tilde x_1 = x_1 + O(\tau^4)$</tex>?  If that were true,
our fourth-order scheme would allow us to recycle the last force
calculation, and we would really have obtained a fourth-order scheme
with an effective costs of only two new force calculations per step.
This does sound too good to be true, but let's just check.

:eqnarray:
\tilde x_1 - x_1 &=& 
\left\{
\left(\eta_{32} k_1+\eta_{33} k_2\right)
- \left(\alpha_1 k_1 + \alpha_2 k_2 + \alpha_3 k_3\right)
\right\} \tau^2  \nonumber\\
&=&
\left\{
\half k_2
- \left(\one{6} k_1 + \one{3}k_2\right)
\right\} \tau^2  \nonumber\\
&=&
\one{6}(k_2 - k_1)\tau^2  \nonumber\\
&=& \one{12}v_0f_0'\tau^3 +O(\tau^4)

It was too good to be true!

We thus have:

:equation:
\left\{ \begin{array}{lcl}
x_1 &=& x_0 + v_0 \tau
 + \one{6} \left(k_1  + 2k_2\right) \tau^2   \\
v_1 &=& v_0 + \one{6}\left(k_1 +4k_2 + k_3\right) \tau \\
\phantom{1}&\phantom{1}&\phantom{1} \\
k_1 &=& f(x_0)    \\
k_2 &=& f(x_0 + \half v_0\tau + \one{8} k_1 \tau^2)    \\
k_3 &=& f(x_0 + v_0\tau + \half k_2 \tau^2)
\end{array} \right.

Looking at the equations this way, we can in fact see directly that a
fourth-order scheme doesn't work ('directly' once you have become
sufficiently familiar with all these expressions).  For the scheme to
be fourth order, the position where the last force calculation is
computed should agree to third order with the new position at the end
of the time step.  However, the latter has a <tex>$k_1$</tex> term which the
former lacks, and since the difference <tex>$k_1 - k_2$</tex> is of first order
in <tex>$\tau$</tex>, there is a real third-order difference between the two
positions, hence between the forces computed in these two positions.
The upshot is that this will introduce a fourth-order error in the
velocity in the next step, when we recycle the last force calculation.
Our scheme is thus only third-order accurate when we recycle, even
though it is fourth-order accurate if we decide to compute all three
new forces anew at each step.

By the way, as a fourth-order scheme, it is listed in Abramowitz and
Stegun's welknown Handbook of Mathematical Functions as eq. 25.5.22,
but with a typo: the error in the position is listed as being
<tex>$O(\tau^4)$</tex>, while it really should be <tex>$O(\tau^5)$</tex>; in addition no
error is listed for the velocity.  As we have seen, for the velocity,
too, the error is <tex>$O(\tau^5)$</tex>.

= Multistep Algorithms

xxx
