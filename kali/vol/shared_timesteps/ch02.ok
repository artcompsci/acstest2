= Distance Measures

== Phase Space

*Bob*: Now that we have a shared time step code <tt>nbody_sh1.rb</tt>,
I'd like to make sure that it really gives the same results as the
previous code <tt>nbody_cst1.rb</tt> that used constant time steps.
Having good energy accuracy is one thing, but it would be much better
to check the actual particle positions.

*Alice*: How about computing the distance between the results of two runs,
in 6N-dimensional phase space?  A whole N-body system can be viewed
as a single point in a space that spans all the degrees of freedom of
the positions and velocities of all particles.

More generally, if we model a system in D dimensions, a single
particle will have D components for its position as well as its
velocity, or 2D in total.  N particles will have 2DN such degrees of
freedom.  For planar N-body systems, we need a 4N-dimensional phase
space, and for N-body systems in the real three-dimensional world we
are dealing with a 6N-dimensional phase space.

*Bob*: In practice this means, I presume, that you use Pythagoras to
compute the distance in such a large space.  In other words you take
the square root of the sum of the squares of all the differences, right?

*Alice*: Indeed.

*Bob*: So another way of looking at your suggestion is that you compute
the average distance between corresponding particles in the usual
6-dimensional phase space.  Apart from a normalization factor N, the
result would be the same.

*Alice*: Yes, that's right.  I like the more abstract picture, but your
description boils down to the same thing.

*Bob*: I find it a lot easier to think about 2D dimensions than about 2ND
dimensions.  In either case, the practical procedure is that we have to
subtract two N-body systems, point by point, and then we have to compute
the norm or `size' of the resulting system, a type of absolute value.

*Alice*: Ah, so you _do_ like abstract thinking, after all!  How about
defining a minus operator, that allows us to subtract two N-body systems,
<tt>nb1</tt> and <tt>nb2</tt>, just by writing <tt>nb1-nb2</tt>?  That
would give us a nicely compact notation.  And the 2DN-dimensional distance
between the two systems could then be given by <tt>(nb1-nb2).abs</tt>
if we define the correct absolute value operator +abs+ for the <tt>NBody</tt>
class.

*Bob*: Good idea!  However, there is no guarantee that two N-body systems
will show their particles in the output in the exact same order.  In other
words, what we need is a way to identify which particle in the one system
corresponds to which particle in the other system.

*Alice*: I guess we have to number them, by giving each body a unique
identifier.

== Numbering Bodies

*Bob*: Given that every object in Ruby already has an identifier called
<tt>object_id</tt>, a natural name for such an ID would be <tt>body_id</tt>.
Now that is easy to implement.  How about writing a nifty tool like this,
in file <tt>nbody_set_id.rb</tt>:

 :inccode:nbody_set_id.rb

== A Test Count

You see, I even allowed for taste: the default is to start numbering at
one, but you can start at zero as well, or at any other place you like.
Let's test it with our Plummer Model:

 :commandoutput: kali nbody_set_id.rb -h
 :commandoutput: kali mkplummer.rb -n 2 | kali nbody_set_id.rb -p 5
 :commandoutput: kali mkplummer.rb -n 2 | kali nbody_set_id.rb -p 5 -n 42

== Defensive Programming

*Bob*: Now, with identifiers in place, we can extend our <tt>nbody.rb</tt> file
by adding a subtraction operator:

 :inccode:.nbody.rb+-

This includes proper testing of particle identities.

*Alice*: And I see that you are returning the newly constructed nbody system
+nb+ at the end of the method.  Also, you're getting quite defensive
in your programming!

*Bob*: This is a situation where defensive programming is called for.
In general, I don't like to litter my code with many error checking
lines all over the place, but in this particular case, it is quite
likely that the difference operator will be invoked for incompatible
N-body systems.  So I'm checking whether the other object is really
of +NBody+ class, whether it has the same number of particles as the
calling +NBody+ object, and most importantly, I am then checking
whether each particle in the calling system has a counter part in the
other system, with the same <tt>body_id</tt>.

*Alice*: Applause, applause!  As you know, I like to check things, as
a matter of habit, in order to prevent future surprises that may be
hard to debug.  But I agree, you can overdo with anything, and there
is a lot to say for keeping code small.  In this case, though, the
whole code is so small that it doesn't distract to have these extra
safeguards built in.

== Putting it together

*Bob*: With our new tools in hand, it now becomes really trivial to
check for the actual size of the difference between two N-body
systems, by defining the absolute value method, also within the file
<tt>nbody.rb</tt>:

 :inccode:.nbody.rb+abs

*Alice*: Sometimes we may want to look only at the positions, restricting
ourselves to configuration space, rather than to phase space.

*Bob*: That's easy.  Here is a position-only version of +abs+:

 :inccode:.nbody.rb+abs_pos

*Alice*: Let me try to implement the module that gives the difference
between two N-body systems, as the 6N-dimensional distance in phase space,
or the 2DN-dimensional distance for the general case of D spatial dimensions.
It's time to practice my Ruby skills again.  Let's call the file
<tt>nbody_diff.rb</tt>:

 :inccode:nbody_diff.rb

How about this?

== Checking it out

*Bob*: Looks fine, as far as I can see.  You put in options to allow for more
precision, without burdening the reader with all those extra digits in
the general case.  And you also gave an option for positions-only
comparisons.

Time to test it!  We still have the initial conditions lying around
for a circular binary, I believe.  Ah yes, here it is, in
<tt>circular_binary.in</tt>:

 :inccode:circular_binary.in

To start with, let's see whether two identical systems are assigned a
distance of zero correctly:

 :commandoutput: kali nbody_set_id.rb < circular_binary.in > tmp0.in
 :commandoutput: cat tmp0.in tmp0.in | kali nbody_diff.rb

*Alice*: Good!  Let's perturb our binary slightly.  If we use the most
popular Pythagorean triangle, we can immediately check whether our
Cartesian distances in phase space come out correctly.  Here is a file
<tt>pert_circ_binary.in</tt>:

 :inccode:pert_circ_binary.in

And here is our first real result:

 :commandoutput: kali nbody_set_id.rb < pert_circ_binary.in > tmp1.in
 :commandoutput: cat tmp0.in tmp1.in | kali nbody_diff.rb

Just what it should be!  Now for positions only, and a higher precision:

 :commandoutput: cat tmp0.in tmp1.in | kali nbody_diff.rb -r -p 5

Perfect.  I think we're ready to move on.
