ACSDOC revision work memo

J. Makino Nov 17 2005

Here I try to record as much as thoughts and actual works.

First, there need to an easy way to record changes. It would be okay
to use svn to record every changes. So one liner

svn commit -m "working change for acsdoc2" --non-interactive

would do the recording. Test:

acssvn commit -m "working-change-for-acsdoc2"
Adding         kali/vol/documentation/acsdoc2.rb
Deleting       kali/vol/documentation/ascdoc2.rb

Fine, except that it takes rather long time.

The following will print the change between the latest committed
version and last change:

svn diff -r COMMITTED acsdoc2.rb

Thus, by having a script:

#!/bin/csh -f
setenv SVN_SSH "ssh -l acs"
setenv LANG C
date >> acsdoc-rev-memo
svn diff -r COMMITTED acsdoc2.rb >> acsdoc-rev-memo
svn commit -m "working-change-for-acsdoc2" --non-interactive >> acsdoc-rev-memo

I should be able to record all changes in the file acsdoc-rev-memo
(which is this file)

Fri Nov 18 06:13:23 JST 2005
Index: acsdoc2.rb
===================================================================
--- acsdoc2.rb	(revision 1369)
+++ acsdoc2.rb	(working copy)
@@ -20,6 +20,8 @@
 # string as an argument
 #
 # 2005/11/17 created acsdoc2.rb
+# test for more change
+# more changes
 #
 #==============================================================================
 #$DEBUG=1
Sending        documentation/acsdoc2.rb
Transmitting file data .
Committed revision 1370.

Okay, this works.

Currently, acsdoc for HTML generation works in the following steps:

1) create .foo.cp files, from foo.cp file
   it also generates .bar.rb files from bar.rb files. This part need
    not be changed
  
2) calling rdoc for .foo.cp files

3) doing many postprocessing....

So let us first make the following changes:

1) instead of making .foo.cp files, create foo.html files
2) do not call rdoc
3) do not remove .foo.cp files (since they are not created)

Questions: Should HTML files be at the same directory as cp files?
Well, perhaps it is, since there would not be other good place...

First the first step

Fri Nov 18 06:49:49 JST 2005
Index: acsdoc2.rb
===================================================================
--- acsdoc2.rb	(revision 1370)
+++ acsdoc2.rb	(working copy)
@@ -1,18 +1,10 @@
 #!/usr/bin/ruby
 #
-# acsdoc.rb
+# acsdoc2.rb
 #
-# This script takes a number of files and runs rdoc ("rdoc.sourceforge.net")
-# on them.  All options normally given to rdoc on the command line are
-# passed on to rdoc.
+# This script takes a number of files and make HTML or LaTeX files from them. 
+# usage:  ruby acsdoc.rb [--tolatex]   [file]...
 #
-# As an internal detail, this script generates for each .cp file "filename.cp"
-# a temporary file ".filename.cp", which is removed before the script finishes.
-# If acsdoc.rb is invoked with the option "--keep-dot-files", these temporary
-# files are not removed
-#    s
-# usage:  ruby acsdoc.rb [--keep-dot-files] [--tolatex]  [rdoc option]... [file]...
-#
 # 2004/3/22 Major rewrite to make it more easily extensible.
 #
 # Basic change: all functions are changed to (if not already designed
@@ -1637,7 +1629,6 @@
 load_old_aux
 load_volindex
 del_flag = true
-del_file_list = Array.new
 tolatex_flag = false
 
 ARGV.collect! do |a|
@@ -1645,14 +1636,13 @@
     extention = "."+$1
     if FileTest.size?(a)
       unless tolatex_flag 
-	dot_a = File.dirname(a)+"/."+File.basename(a);
+	dot_a = File.dirname(a)+"/"+File.basename(a,extention)+ ".html"
       else
 	dot_a = File.dirname(a)+"/"+File.basename(a,extention)+ ".tex"
       end
       $current_cp_filename = a
       prep_cp(a, dot_a, tolatex_flag)
       a = dot_a
-      del_file_list.push(dot_a)
     else
       a = ""
     end
@@ -1679,9 +1669,6 @@
       a = ""
     end
     a
-  elsif a == "--keep-dot-files"
-    del_flag = false
-    a = ""
   elsif a == "--tolatex"
     tolatex_flag = true
     del_flag = false
@@ -1701,22 +1688,11 @@
 end
 
 unless tolatex_flag
-  print "rdoc #{coptions} #{ARGV.join(" ")} \n" 
-  unless system("rdoc #{coptions} #{ARGV.join(" ")}") 
-# This part is to work around some unfixed bug in rdoc
-    system("touch .zdummy")
-    system("rdoc #{coptions} #{ARGV.join(" ")} .zdummy") 
-  end
-  add_toc
-  process_css
-  dump_aux
+#  add_toc
+#  process_css
+#  dump_aux
 end
 
-create_navigations_for_cp_files(ARGV)
-if del_flag
-  del_file_list.each do |f|
-    File.delete(f)
-  end
-end
+#create_navigations_for_cp_files(ARGV)
 
 # :segment end:
Adding         documentation/acsdoc-rev-memo
Sending        documentation/acsdoc2.rb
Transmitting file data ..
Committed revision 1371.

<yebisu:/home/makino/acs/kali/vol/documentation>acsdoc2.rb ch02.ok
acsdoc2.rb:491: warning: regexp has `}' without escape
acsdoc2.rb:1424: warning: regexp has `}' without escape
Loading initialization file .acsdocinitrc
Common initialization file loaded from etc/acsdocinitrc
acsdoc2.rb:1698: undefined local variable or method `del_file_list' for #<Object:0xb7d399c0 @previous_is_command=nil> (NameError)
<yebisu:/home/makino/acs/kali/vol/documentation>up

Fri Nov 18 07:02:51 JST 2005
Sending        documentation/acsdoc-rev-memo
Transmitting file data .
Committed revision 1372.

Fri Nov 18 07:09:07 JST 2005
Sending        documentation/acsdoc-rev-memo
Transmitting file data .
Committed revision 1373.

Now HTML file is made, but with the old content of .foo.cp file

Question is how to structure the source code. Current structure of the
make code is:

    unless tolatex_flag
      s = convert_link_to_rdoc_style(instring,dirname)
    else
      s = instring
    end
    tmpstring=prep_cp_string(s,dirname,infile).split("\n");
    if tolatex_flag
b      tmp2= Rdoctotex::convert_to_latex(tmpstring,dirname);
    else
      tmp2= Rdoctotex::latex_process_tex_mathmarkup(tmpstring)
      tmp2= find_and_process_tex_inlines(tmp2,dirname);
      tmp2= find_and_process_tex_equations(tmp2,dirname);
      tmp2= find_and_process_figures(tmp2,dirname);
      tmp2= find_and_process_generic_tag(tmp2,dirname,"nosectionnumber",
					 "process_nosectionnumber")
      tmp2= process_toc(tmp2,infile);
      tmp2= process_section_headers(tmp2,infile)
      tmp2= process_tex_labels(tmp2,dirname);
      tmp2= process_tex_weblinks(tmp2)
      tmp2= process_some_special_characters(tmp2)
    end

So, basically by changing the functions in the last else block, I can
generate HTML directly. I guess I just try that for now.

      tmp2= find_and_process_tex_inlines(tmp2,dirname);

This one actually touch process_tex_inlines
which then call process_texcode
Fri Nov 18 09:21:37 JST 2005
Index: acsdoc2.rb
===================================================================
--- acsdoc2.rb	(revision 1371)
+++ acsdoc2.rb	(working copy)
@@ -878,7 +878,7 @@
       raise "Failed to create the jpeg file #{texbase}.jpeg"
     end
     @@imgcount+=1
-    "link:../#{imgname}"
+    "<IMG SRC=#{imgname}"
   end
 
   def process_tex_inlines(s,instring,dirname)
Sending        documentation/acsdoc-rev-memo
Sending        documentation/acsdoc2.rb
Transmitting file data ..