= Multi-Step Methods

== An Six-Step Method

*Alice*: Hi, Bob!  You've been up to something again, I can tell.

*Bob*: I got hooked on exploring multi-step methods.

*Alice*: Don't tell me that you went to 6th order!

*Bob*: No, in the sense that I did not _just_ go to 6th order.
I actually went to 6th _and_ 8th order.

*Alice*: No!  That can't be, with your dislike for combinatorics.  You're
pulling my leg.

*Bob*: No, I did not do the combinatorics myself.  Instead, I used a
symbolic manipulation package.  When I saw you struggling with all those
substitutions when we tracked the fourth-order nature of the
Runge-Kutta integrator, I was already wondering whether we shouldn't
use a symbolic package.  At that point I didn't bring it
up, since we were in the middle of trying to figure out how things
worked in the first place, and introducing yet another tool might have
been confusing.

And also when we generalized my two-step method to a four-step method,
I could see the merit of tracking things done with pen and paper.
Certainly when we're going to show this to our students, we should
demand that they are at least _able_ to do it with pen and paper.  But
now that the procedure has become crystal clear, we are just faced
with solving a large number of linear equations with the same number
of unknowns, and that is really not something I want to do by hand;
not would I learn much from doing so.

Incidentally, I also had a look at the literature, and I found that
people general solve this type of problem using what they call divided
differentces, really a form of Newton interpolation.  In that case
they do not have to solve the system of equations that we set out to
do.  Even so, their approach is not that simple either when going to
higher order.  Given the ease of using a symbolic manipulation program,
I think that our approach is just as good as the standard one.

Here is what I found, with the results for the coefficients directly
plugged back into the code:

 :inccode: .ms6body.rb+ms6

== An Eight-Step Method

*Alice*: Again not so bad, and each time derivative still fits on one line.
I see a jerk, a snap, a crackle, and a pop.  But what is that next line,
this +x+ variable?  It must be the derivative of the pop, given that you
multiply it with yet one higher power of the time step.  What does it stand
for?

*Bob*: To be honest, I had no idea what to call it, so I just called it
+x+.  The advantage was that I could then call the next two derivatives
+y+ and +z+, for the eighth-order scheme.

*Alice*: Iron logic!  And you used Yoshida's sixth-order integrator, to
rev up the engine, five times.

*Bob*: Yes, I am glad we had both <tt>yo6</tt> and <tt>yo8</tt> lying
around.  They sure came in handy!

*Alice*: And you'd like to show me the eighth-order version as well,
don't you?

*Bob*: I can't wait!  Here it is, in file <tt>ms8body.rb</tt>.  

 :inccode: .ms8body.rb+ms8

As you can see, this time I abbreviated the variables yet a little
more: instead of <tt>@ap3</tt>, for example, I wrote <tt>@a3</tt>,
since by now the meaning is clear, I hope.

== Very Strange

*Alice*: Let's see whether your symbolic manipulator has done its job
correctly . . . 

*Bob*: . . . and whether I have done my job correctly, typing in the
results.  We'll start with our, by now almost canonical, set of values:

 :commandoutput: ruby integrator_driver4g.rb < euler.in

Hmm, almost too good.  Let's be bold and try a much longer time step,
to get some more playing room, away from machine accuracy.

 :commandoutput: ruby integrator_driver4h.rb < euler.in

Hey, that is _very_ strange!  Now the errors are getting better,
for a five time longer time step?  That can't be!

*Alice*: That is strange indeed.  Independent of the order, the results
should at least get worse, certainly for such a short part of a Kepler
orbit.  It's not like we just encountered a singularity or something.

*Bob*: It feels as if I have just violated the second law of thermodynamics
or something.  How can that be?

== Wiggling the Wires

*Alice*: As you say in cases like this, let's wiggle the wires, just to
see what happens.  How about taking an even larger time step, by a factor
of two?

*Bob*: May as well.  Here is the result:

 :commandoutput: ruby integrator_driver4i.rb < euler.in

*Alice*: And now the error finally gets worse, and by a factor of about 60,
just what you would expect for a 6th-order scheme.

*Bob*: If we would have just done the last two runs, we would have been
very happy and content.  How difficult it is, to test a piece of software!
We know that there is something _seriously_ wrong, because the first run
of the last three gave a result that was way off, and yet the last two
runs with much larger time steps seem to behave like a charm.

*Alice*: Like a charm indeed.  Now there must be _something_ different,
between the first run, and the last two.

*Bob*: But what can there be different?  Same code, some procedure, same
Bob, same Alice.

*Alice*: Only larger time steps.  And since you kept the total
integration time constant, fewer steps in total.  In fact, the last run
had just one step, and the run before that only two steps.  But how can
that make a diff . . . . Ah!  You talked about revving up the engine . . . 

*Bob*: . . . so if I am only doing _one_ or _two_ time steps, as I've
done in the last two runs . . .

*Alice*: . . . you're not testing Bob, you're testing Yoshida!

*Bob*: And clearly, Yoshida has done a very good job indeed.  And in the
next-to-last run, where I took ten time steps, I just started to run the
eight-step method, but only in the last three steps.  Okay!  What a relief.
No problems with the law of thermodynamics, after all!

== Testing the Six-Step Method

*Alice*: So we have to do many more steps, much more than the minimum
number of seven, needed to switch over from the startup <tt>yo6</tt> method
to the real <tt>ms6</tt> method.  Let's shoot for a full hundred time steps:

 :commandoutput: ruby integrator_driver4j.rb < euler.in

*Bob*: Wow, Yoshida's integrator is great, in comparison.  Let's see what
happens if we go to a thousand time steps instead, making each step ten
times smaller.  For a sixth order scheme that should make the error a full
million times smaller.

 :commandoutput: ruby integrator_driver4k.rb < euler.in

*Alice*: And yes, the errors _are_ almost a million times smaller.
Now we're getting there.  Let's do a final test, making the time step
twice as long again:

 :commandoutput: ruby integrator_driver4l.rb < euler.in

Great!  Close to factor 64, and now really with the multi-step integrator,
not with a little startup help from Yoshida.  We're talking 500 and 1000
steps here, so we're finally testing the six-step code itself.

== Testing the Eight-Step Method

*Bob*: Time to test the eighth-order implementation.  Given that we are
now warned about not using few time steps, let's start with one hundred
steps, as we did before:

 :commandoutput: ruby integrator_driver4m.rb < euler.in

*Alice*: Not bad.  But with an eighth-order scheme, we can't make the time
step ten times smaller, since that would go way beyond machine accuracy,
for double-precision calculations.  Let's just halve the time step.
For an eighth-order scheme that should gain us an accuracy factor of
<tex>$2^8=256$</tex>.

 :commandoutput: ruby integrator_driver4n.rb < euler.in

*Bob*: That's getting closer to a factor 256, but we're not quite there yet.
I'll try to shrink the time step by another factor of two:

 :commandoutput: ruby integrator_driver4o.rb < euler.in

*Alice*: Closer!  And certainly closer to 256 than 128.

*Bob*: And close to machine accuracy as well.

*Alice*: I think we can declare victory, once again.  Congratulations,
Bob: your second implementation of an eighth-order integration scheme,
after your <tt>yo8</tt> implementation.  And this time you found all
the coefficients yourself!

*Bob*: Or, to be honest, the symbolic integrator found them.  Well,
I'm glad it all worked, especially after that scare with that start-up
mystery!

And of course, if we really wanted to go all out, I should implement
full predictor-corrector versions for each of them.  Well, perhaps some
other day.
