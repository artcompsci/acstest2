= Debugging the N-body Code

== Forward Euler

*Bob*: Okay, ready to chase and catch our bug?

*Alice*: Sure thing!  And I like your idea to simplify things and turn
to our old friend, the forward Euler algorithm.  And we may as well
make the total integration time a bit shorter, to speed things up.

 :commandoutput: ruby rknbody1c_driver.rb < test5.in

*Bob*: That doesn't look too good, but then again, forward Euler is not a
great integrator.  I'll give it a ten times smaller time step:

 :commandoutput: ruby rknbody1d_driver.rb < test5.in

== Nothing Wrong

*Alice*: Okay, this is really wrong.  Almost the same magnitude for the
error.

*Bob*: Now that we know that the forward Euler method also fails for this
orbit, we can take a single time step, and track things by hand.

 :commandoutput: ruby rknbody1e_driver.rb < test5.in

Let me print out the initial conditions again:

 :inccode: test5.in

The initial velocity is along the _y_ axis, so after one step the _x_
components of the positions of the particles should not be affected.
Indeed, they remain at 0.5.

The _y_ components of the positions should be equal to
<tex>$\bv \Delta t = 0.01 \bv$</tex>.  And so they are.

As for the velocities, their _y_ components should be unchanged,
and indeed that is the case.

Finally, the _x_ components of the velocities should be equal to
<tex>$\ba \Delta t = 0.01 \ba$</tex>.  The acceleration, for particles of
mass 0.9, at distance 1, should be 0.9, which means that <tex>$|\ba \Delta t| =
0.009$</tex>.  All that checks too.

*Alice*: Yes, it is much easier to visually inspect a forward Euler scheme
than a fourth-order Runge-Kutta, I agree!

*Bob*: But how strange.  It seems that there is really nothing wrong with
this step.  If this step is correct, how can things go wrong later on?
Admittedly, we are still starting from a somewhat special case, launching
our particles parallel to the _y_ axis, while being positioned on the
_x_ axis.  Perhaps we should take a really generic initial position,
not lined up with anything at all?

== Two Possibilities

*Alice*: Hmmm.  You know, it might indeed be that the integration is
proceeding fine, but that there is an error in the determination of
the energy error.

*Bob*: Ah, that could well be the case.  That would be like trying to land
an airplane, and to see a warning light coming on, telling you that
your landing gear is not fully unfolded.  There are two possibilities:
either your landing gear is faulty or the warning light is
malfunctioning.

*Alice*: If I were the pilot, I would surely hope that it is the warning light
that is at fault.  In our case either way is no problem, either way, as long
as we can trace where what went wrong.

*Bob*: But for tracking down energy diagnostics, we really have to get back
to the code, and read all the lines that compute energies.  Unlike the
integration itself, where we can slow down to take just one time step,
the energy diagnostics have no free parameter; either you do it or you don't.

*Alice*: Before we look at the code, let us stare at the output just a bit
longer.  It still may give us a clue.  But I don't like to think about
slightly eccentric and slightly non-unity masses.  Let us run the equal-mass
circular binary with masses unity once more, and that one, too, for just one
time step:

 :commandoutput: ruby rknbody1e_driver.rb < test2.in

*Bob*: This one, too, is perfect.  I'm getting better at `reading' the
forward Euler output: I can see now immediately that both the directions
and the magnitudes of the increments in position and velocity are correct.
The acceleration here is just 1.

== Back to Square One

*Alice*: I guess we'll have to walk through the code, much as I don't like
to do that, as a matter of principle.  A good code should give you
enough diagnostics to allow you to track down a bug by treating it as
a black box.

*Bob*: The only other numbers here, apart from the energy errors, are the
kinetic and potential energy, and they are obviously correct, given the
values for the circular binary: at distance 1 and masses 1, the potential
energy must be -1, and with velocity 0.5, each kinetic energy is 1/4,
so 0.5 in total.

*Alice*: Ah, you are looking at the energies at time <tt>t = 0</tt>.
That is a great idea: if it is a matter of the warning light malfunctioning,
chances are that it already malfunctioned when the plane took off!

*Bob*: But I've just shown that it did _not_ malfunction!

*Alice*: But the circular binary did not give us any problems.  It was the
non-unity masses and the eccentricity that did it.  Let us redo that one
forward Euler step, which showed a correct integration in that case,
and let us check by hand whether the initial energy is computed
correctly there.  Let us put everything on the table once more.  First
the initial conditions:

 :inccode: test5.in

Then the result of the one time step:

 :commandoutput: ruby rknbody1e_driver.rb < test5.in

The initial potential energy must be equal to the square of the masses,
divided by the distance, <tex>$0.9 \times 0.9 / 1 = 0.81$</tex>.  That
is indeed what the code gives.  The initial kinetic energy for each
particle must be <tex>$ 0.5 \times 0.9 \times 0.5 \times 0.5 = 0.1125$</tex>,
so for both particles together <tex>$0.225$</tex>.  Hey!  The code output
gives us <tex>$0.25$</tex> !

== A Warning Light

*Bob*: So it is the warning light, after all.  The potential energy gets
calculated correctly, but the kinetic energy doesn't.  That will be easy
to check.  Here is the method in the +Body+ class:

 :inccode: .rknbody1.rb+ekin+Body

And indeed, I left out the mass!  How simple.  Of course, it should have
been:

 :inccode: .rknbody2.rb+ekin+Body

And I can understand now why I made that mistake: in our earlier two-body
code the corresponding method was:

 :inccode: .rkbody.rb+ekin

and as the comment indicated, there it was defined <i>per unit of
reduced mass</i>.  I just erased the comment, since I knew that the
concept of reduced mass only applies to a two-body problem, and not to
the general N-body problem.  But although I erased the comment, I
failed to change the code line itself, by adding the mass factor!

What a blunder.  And I even commented on the fact that I was so careful
to include an extra mass factor in my definition of the potential energy!
But in that case, I was modeling the potential energy method +epot+
after the method +acc+ that calculates the acceleration, because both
involve a loop over all other particles.  That is why I did not 
compare the +epot+ and +ekin+ methods.

*Alice*: Well, it is an easy mistake to make.  I have made plenty of
much more obvious mistakes in my life!  The challenge is not so much
to write correct code, but to debug code correctly.  And I think we
did pretty well, given the fact that this was a very tricky bug to
discover in the first place.

*Bob*: Tricky indeed: if we would have only tried a circular orbit, even
with masses that were not unity, we would have never found this bug.
I'm very glad now that you insisted on using unequal masses!

*Alice*: Unequal masses and eccentricity.  If we would have used unequal
masses for an eccentric orbit, we _still_ would not have seen a
problem with energy conservation.  The energy would have been
calculated wrong at time <tt>t=0</tt>, but for a circular orbit,
energy and potential remain constant throughout the orbit.  So the
same mistake in kinetic energy would have been present at any later
time, and the code would have reported no significant energy change;
our energy drift warning light would not have come on!

*Bob*: You are right.  Now that is a tricky bug.  Clearly the moral of the
story is: test any new code for generic input data, not only for input data
that are easy to generate and easy to interpret.

== Hindsight

*Alice*: Ah, but wait a minute!  Before we congratulate ourselves too much,
I wonder whether we should not have noticed that there was something wrong
with the energies in the case of the circular orbit where the masses
of the two stars were equal to each other, but different from unity.  Let
us look at that case again.  Where did we file those data?  Ah, here it is:
we stored the initial conditions in the file <tt>test3.in</tt>:

 :inccode: test3.in

Let us run that case again, with the original code <tt>rknbody1.rb</tt>:

 :commandoutput: ruby rknbody1a_driver.rb < test3.in

*Bob*: You are right!  Now that we know what to look for, it is obvious
that the diagnostics output is totally wrong.  Already at time <tt>t = 0</tt>,
the total energy is positive: <tt>E_tot = 0.04</tt>.  A binary with positive
total energy will immediately fly apart.  We should have noticed that right
away!

*Alice*: We should have, yes, but we didn't.  It goes to show: even with
good diagnostics, it is easy to overlook a trouble signal.  To
continue with your analogy of a pilot, looking at a warning signal: in
a cockpit with many different indicators, one can overlook the fact
that one of the meters gives an impossible result.  We were staring at
the red light of errors in energy conservation, and we overlooked the
less obvious lights.

*Bob*: Still, I feel pretty stupid that I didn't see that we were setting
up a binary with binding energy of the wrong sign.

*Alice*: Well, that makes two of us.  But the goal of good software
development is not to make programmers perfect, since that is impossible.
Instead, the goal should be to make debugging easy enough, so that
imperfect people can still converge to an almost-perfect code, when
they try hard enough.  This in itself is already enough of a reason
for using a language like Ruby, where the programmers are not bogged
down with trying to keep the compiler happy.  We can at least spend
all of our energy on the debugging process itself, without worrying
about declarations and type checking and all the other constraints
that the more classical languages always bring with them.

*Bob*: You have a charitable interpretation of human weakness.  Even so,
I really will try not to make this kind of silly mistake again.

*Alice*: Famous last words!

== Bug Fixed

*Bob*: So, we're done!

*Alice*: It seems that way.  But it would not hurt to test our
original run again, now that you have fixed the code.  You know, it
would not be the first time that a code contains more than one bug.
Another common mistake people make is to find a glaring bug in a code,
fix it, and then happily declare the code to be correct, without
looking further.

*Bob*: Okay!  I will call the corrected version <tt>rknbody2.rb</tt>, since
I would like to keep the original file <tt>rknbody1.rb</tt>, to show
to my students later on.  It would be interesting to see how they
would go about debugging it.  Here is our original run, but now with
the corrected code:

 :commandoutput: ruby rknbody2a_driver.rb < test1.in

== One More Check

*Alice*: That's it: the energy conservation is perfect.  But let us not
declare victory too early: let's compare the actual positions and velocities
with what we got with our earlier two-body code.  However, to compare
the data, it would be better to convert our results to relative coordinates
between the two particles.  That should be easy: let us make a little script
for this simple form of data reduction, and call it
<tt>rknbody2a_reduce.rb</tt>:

 :inccode: .rknbody2a_reduce.rb

All it does is to read in an N-body system, and print the relative positions
and velocities of the first two particles with respect to each other.
We can then pipe the results from our previous calculation into our
new script:

 :commandoutput: ruby rknbody2a_driver.rb < test1.in | ruby rknbody2a_reduce.rb

And compare the results with what we found directly with our two-body code:

 :commandoutput: ruby integrator_driver2h.rb < euler.in

*Bob*: Indeed, very closely the same, to well over ten decimals!  Very nice.
I think we can declare victory now.

*Alice*: For the time being, yes.  But I would never discount the possibility
that somewhere, in some dark corner, some other little bug may still be hiding.
However, at some point you just have to move on, while staying
vigilant, always being prepared to go back to inspect older codes that
you were convinced to be fully debugged.

*Bob*: By the way, I'm glad we decided to put the energy diagnostics on the
standard error stream +STDERR+, while keeping only the particle output
on the standard output stream.  If we would have written everything on
the standard output, it would have been impossible to pipe the data
into the next program, as we did above.

*Alice*: For now, yes, that was a good strategy.  But I worry about the
idea of scattering related data in completely different directions.
Actually, it would be even better to encapsulate the error diagnostics
somewhere in the output, in order to keep the data together.  Soon we
should introduce a new data format, once that keeps everything bundled,
but in such a way that the next program will have a fixed and known way
to find the data it wants.

*Bob*: You mean a form of self-describing data?  Like the FITS format that
observers use?  Yes, that would be interesting, and it would not be too hard
to implement.
