= Measuring Binary Formation Times

== Getting Blunt

*Bob*: Enough with all these preparations!  My fingers are itching to do
some lab experiments.

*Alice*: Fair enough.  We have already decided to find the typical time
of first binary formation, starting from a Plummer model.  We have learned
how to let Ruby run a Ruby program, and we have taught our <tt>world4.rb</tt>
work horse how to identify binaries.  Time to put it all together.

*Bob*: You bet.  And this time I will make sure that we don't get drawn
into niceties and generalities.  Let's be blunt and get results first.

*Alice*: No more mister Nice Guy, you mean?

*Bob*: I'm happy to be nice again in a little while, but for now, let's get
moving.  First question: how to do a single run, and determine the
time of first binary formation.

*Alice*: I suppose we can let <tt>world4.rb</tt> run for a while, then analyse
the output, restart <tt>world4.rb</tt> again if no binary of the right hardness
has been formed, and so on.

*Bob*: Too nice.  Too complicated.  Later on, fine, but let's make a shortcut.
How about letting <tt>world4.rb</tt> run and run until the first binary
appears, and then just kill the program?

*Alice*: You are getting blunt, aren't you!

*Bob*: I sure am.  Let me try something.  How about this, as a lovely short
test program?  I'll call it <tt>test1.rb</tt>:

 :inccode: .test1.rb

*Alice*: A lovely program to kill our integrator?  Funny choice of phrase.

*Bob*: But that's what it does.  It reads in whatever our integrator spits
out, and as soon as it finds a diagnostics line reporting a binary being
formed, it exits.

*Alice*: And by doing so, it breaks the pipe between the integrator and the
test program, rudely stopping the integrator in its tracks.  This is about
the most unelegant way of programming I've every seen!

*Bob*: So be it.  Let me show you in more detail, perhaps you will then
appreciate the simplicity, if not the elegance, behind the madness.
See, the particle output from <tt>world4.rb</tt> gets piped into
<tt>test1.rb</tt> which then reachs each story line by line.  If the
story contains a line that contains a semicolon followed by two spaces
and then <tt>a =</tt>, it assumes that it has found a report of a
binary that has been formed.

The first time it finds such a binary, it halts execution and forces
the whole pipeline to end its operation.  So it is up to the user to give
the correct value to the option in <tt>world4.rb</tt> that governs the
maximum semi-major axis that triggers binary reporting.

In other words, if you want to detect when the first binary is formed
that has a semi-major axis that is smaller than <tt>0.25</tt>, you should
invoke the integrator as <tt>world4.rb -x 0.25<tt>.  Wider binaries will
then go unreported, and only binaries of interest will trigger the collapse
of the pipeline.

== Lots of Output

*Alice*: Soon I'll insist to clean up this criminal way of killing integrators.
But for now, let's see whether it all works.

*Bob*: It does, and I'll show you.  See, I even gave it a suggestion
how to get started:

 :commandoutput: kali kali world4.rb ---help

And here we go:

 :commandoutput: kali mkplummer.rb -n 4 -s 1 | kali world4.rb -t 1000 -x 0.25 | kali test1.rb

*Alice*: It works all right!  That much I have to credit you for.  But I can't
say I like it.

*Bob*: We can do a mopping up operation later.  Let's move on.

== Time of Binary Formation

*Alice*: Okay.  So you have managed to wrestle the story with the binary
formation information out of the integrator.  What we really need is not
the story, but the time of first binary formation, given the specified limit
on the size of the binary.  How do you propose to do that?

*Bob*: Simple, just ask for it, that's the beauty of our ACS data format.
Here it is, as <tt>test2.rb</tt>

 :inccode: .test2.rb

*Alice*: You see the payoff that we got for _not_ being blunt, and taking the
time to set up a well crafted ACS IO mechanism.

*Bob*: Noted.  Let's see whether this works, but let me spare you the lots
and lots of output that we got in the previous run.  I'll just report the
end of the story.  Taking the same initial conditions, here we go once again:

 :commandoutput: kali mkplummer.rb -n 4 -s 1 > tmp.in
 :commandoutput: (kali world4.rb -t 1000 -x 0.25 < tmp.in | kali test2.rb > tmp.out) >& tmp.err

*Alice*: Quite a relief, to see such a silent run!  What did you catch in
the standard output?

*Bob*: Hopefully the time of first binary formation:

 :commandoutput: cat tmp.out

*Alice*: Congratulations!  Of course, it is not yet the _actual_ time of
binary formation.  It is the first time the binary has been spotted in a
story, as part of the particle output.  So if we do this type of output
once every time unit, a binary forming at, say, time 3.14 will be noticed
only at time 4.0.

*Bob*: Correct.  And there is no reason not to do an output more often,
as soon as we find a good way to suppress all the unnecessary visible output.

*Alice*: did the standard error channel give the write diagnostics?

*Bob*: Presumably, but let's check:

 :commandoutput: tail tmp.err

Looks like it!

== A Test with One Run

*Alice*: What is next?  I presume you're going to generate these times
of first binary formation user a higher-level Ruby program?

*Bob*: Exactly.  And we know how to do that, as we have demonstrated
with our test program <tt>test0.rb</tt>.  We can apply the same
procedure.  Let me call the new program <tt>test3.rb</tt>.

Just to stay on the safe side, let me ask <tt>test3.rb</tt> to
orchestrate only a single run, for now, using <tt>test2.rb</tt> to
produce the time in which the first binary forms in that run.
Once we know how to do that, we can ask it to perform a whole series
of runs.

How about this:

 :inccode: .test3.rb

*Alice*: Yes, that should do just the type of thing we've seen before.
And by setting the normal verbosity level to 0 you surpress the screen
output.  Good!  That will clean up things.  And since the
<tt>acs_verbosity</tt> will retain its default value of 1, the binary
diagnostics will still be passed on to the story in the particle output,
so that test2.rb can use it to produce the final number.

*Bob*: Let's see whether it indeed does what it should do, once more
with the same numbers as before:

 :commandoutput: test3.rb -n 4 -s 1 -x 0.25

*Alice*: Wonderful.  Our first automatically generated lab result number.

*Bob*: No stopping us now!
