2003, November 11, Tuesday, Kyoto: Jun and Piet

1. Kali Code

We met in Tokyo, took the shinkansen to Kyoto, and spent the afternoon
there at the Yukawa Institute.  Before meeting, we had already decided
to work on the Kali code.  In June, we had spent two weeks drawing up
rough specifications for the major modules of the Kali code and their
interfaces.  However, we did not have the time then to describe the
detailed considerations that led to our decisions, and we also did not
specify the interfaces in detail, on the byte level.

1.1. Interface Specifications

We decided to start with the latter task, since solving that would
also help us to solve the first task: while specifying the interfaces
in precise detail, we can simultaneously document the movitation and
considerations that went into the decisions made.

1.1.1. Two options

We thought about two options for specifying the interface between two
modules:

1) to use an object oriented model.  This implies, for example, that
   we have to specify accessor functions to obtain and modify data and
   methods for a given objects.  There are three ways to do so: at
   compile time, at link time, or at execution time.

2) to completely specify the data passed across the interface on the
   byte level.

The first solution is more elegant, but the main drawback is that it
will tie you to a particular language.  Therefore, we chose the second
option.

1.1.2. A Toy Model

The next question was where to start.  Rather than jumping in to
describe the whole Kali structure, we decided to start with a toy
model, based on the "nbody_sh1.C" code, the shared timestep Hermite
code introduced in our book "Moving Stars Around".  First we will
generalize it to include individual time steps, "nbody_ind1.C", and
then we will separate the code into different modules, the integrator,
the force calculator, and the scheduler, as well as modules for I/O
and such.  For this toy model, we will define the interfaces between
these modules in a precise way.  Next we will implement versions of
each module in C++, Fortran, and Ruby.  We can then test the
interfaces by combining different modules, written in different
languages, into one code, to see whether the various combinations
behave in the same way (the detailed results may be different because
of different roundoff, when numerical operations are done in different
order).

2. File structure

Before beginning to work on our toy model, we had to decide how we
wanted to structure the files that contain the source for our book
series.  So far, we have produced a single volume, "Moving Stars
Around", by writing the text in LaTeX, keep each C++ program in a
separate file, and managing everything under CVS in a directory
structure in which each chapter had a separate directory with the C++
code corresponding to that chapter.

2.1. Problems with the Existing Approach

We had created a mechanism to automatically include the programs and
program fragments into the right places in our book. This was
important, to guarantee that the latest version of each program would
actually appear in the latest version of the book.  However, we
found that there were still several unsatisfactory aspects to this
system:

1) it was easy to make a change in a program, while forgetting to
   update all the places in the text that referred to that program;

2) although we tried to document what we did from day to day in a
   separate lab notes file, we often neglected to update that file,
   which made it almost impossible to reconstruct what we did and why
   we did it, a few months later.

3) while working on our book, we often came up with all kind of
   interesting ideas, for which we sometimes made notes here and
   there, but we did not have a good mechanism to store those ideas in
   a consistent format.  As a result, most of those ideas were lost again.

In addition, we had stumbled on a different type of problem as well:

4) having written our book text in LaTeX, it turned out to be far from
   trivial to produce HTML files, besides the standard postcript and
   pdf files.

After some discussion, we decided to try a completely new approach,
for writing our subsequent volumes.  And since we had just decided to
work on a toy model to test interfaces, we concluded that we might as
well use that toy model also as a test case for this new approach of
better integrating the various files that contain book, code, and lab
notes.

2.2. Two Files, Four Functions

So we have four functions, for the material that we want to produce
while writing our books: the book text, the computer programs, the log
with a description of the day-to-day history, and a mechanism to
collect ideas.  The first two, book and programs, grow like an animal,
where different parts transform internally during the growth.  The
second two, log and ideas, grow more like a plant, with more and more
stuff added as we go along.

We call the collection of text files for the book and the computer
programs together the `source', while we call the collection of log
notes and ideas the `lab notes'.

2.3. Source

In order to prevent problem 1) listed above, we decided to try what
Donald Knuth has called "literate programming", in which book text and
code text are written together, interspersed in the same source file.
Special programs are used to extract the book text and the computer
codes from this common source.  Only the source is meant to be edited.
In this way, the chance for a mismatch between code and text is
minimized.

In order to address problem 4) we decided to switch from LaTeX to XML,
using docbook to make it easy to produce both postscript and HTML pages.
Unfortunately, mathematical equations are not very well supported yet
under XML.  While MathML exists, it is still not very well developed.
So we decided to continue using LaTeX for our equations, and to write
some automatic mechanism to create individual postscript files for the
individual equations.

We are not yet sure how to merge text and code into one source file.
Perhaps we will write our own system, using Ruby.  Before before
making a decision, we would like to hear what others have to say.
We will ask Erik Ray and Norm Walsh for advice.

2.4. Lab Notes

2.4.1. Open Source

It would be good to make our lab notes openly available, in the spirit
of open source, so that anyone interested can not only read our books
and run our programs, but also inspect the whole process that led to
the writing of books and programs, as well as the ideas that popped up
as part of the process.  In a way, all of this is a collection of
different layers of documentation for the source code.

You start with the source code.  There are inline comments to explain
some statements in a microscopic ways.  There are blocks of comments
included in the code to give more macroscopic descriptions of how the
code hangs together.  All three, code statements, shorter and longer
comments can be found in the code source files.

The fourth level of documentation is the book text.  The fifth level
is given by the lab notes that in turn document the process of writing
the book text, as a history of what happened.

In addition, there is yet another, quite different, level: in the lab
we want to add new ideas, when we think about them, even if they are
not immediately connected with the problem at hand.

2.4.2. Presentation

In order to make our lab notes publicly available, we will create a
top HTML page with a one-line entry for each month, which you can
click on in order to access a lower-level HTML page that lists all
sessions that took place during that month.  Clicking on that session
will then direct you to the actual lab notes for that session.  These
lab notes will be presented in a separate file for each month.  We
will use the "name=" mechanism in html to jump to the correct place
inside such a file to, to go to a particular session.

Within each session, we present the history of what we did in that
session and why.  In addition, we will create separate boxes for ideas
that popped up during that session.

 # comment, added 2004/1/2:
 # originally we had here:
 # \fig{labnote-031111.eps, 15 cm}
 # but we have now replaced this with our current mechanism
 # used to include the following figure:

link:images/labnote-031111.gif

2.4.3. Generation of Lab Notes

In order for us to make it easy to write the lab notes for a new
session and add them to the existing HTML files, we will automatize
the process of lab note generation.  Rather than writing a separate
HTML file, which is rather cumbersome, we will introduce a special
file format, with a set of rules for how to automatically transform
that format to HTML.

Each time one of us submits a session, our new software will
automatically add that session to the growing list of sessions, in
HTML form.  The sessions will be added in the order received.

Before submitting your session, you may want to view it in HTML mode,
to check whether things really come out as you intended.  For that
purpose, the software will have a "local" mode, to create a single
stand-alone HTML file for your session.  The "global" mode, in
contrast, will add your session once and for all to the growing
repository of sessions.  If you later want to make changes, you have
to describes those in a later session, and point to the older session.

Finally, we will allow the inclusion of figures and LaTeX equations.
The images for the figures will be automatically copied to the proper
place so that they can be accessed by the HTML files that will include
them.  For the specific case of LaTeX equations that will be turned
into figures, we will create a special file with LaTeX definitions.

3. Notes about Notes for this Session

3.1. Why they were written later

The notes for this session, on November 11, 2003, were actually
written the next day, on November 12, 2003.  The reason was that,
although we finished our first outline of the lab note system on
11/11, we had not quite decided upon a format for writing an
individual session.  The next day, we began the process of making the
necessary decisions, and then we could at least start writing these
notes in a format that will soon grow into our new standard.  For
example, we decided to start with a description of date and place and
persons, and then gave the subsequent information in hierarchical
blocks of sections, subsections, subsubsections, etc.

3.2. How they were written

3.2.1. Our First Attempt

This afternoon of the next day, when we started to write these notes,
we first tried to make a coherent story, by adding here and there some
extra insights that we got today to the descriptions of the topics
addressed yesterday.  However, this quickly got out of hand, and we
realized that we were adding whole chunks of new insights, while
projecting that incorrectly back onto what we did yesterday.

3.2.2. Corrections

We then decided to be more honest, and transfer the new insights to
the lab notes of today, i.e. the next day.  After that, we again went
through the whole session, to restore each section and subsection, etc.,
to what we actually discussed yesterday.

3.3. What we Learned

All this was a wonderful exercise in showing the use of documentation.
By forcing ourselves to spell out what we did, how we did it, and why
we did it, we discovered a large number of places where we had not
been consistent enough, or had not gone far enough.  All kind of new
ideas came up, which we then began to implement right away.  If we had
been less careful about documentation, we would not have noticed all
these potential improvements, and our system would have been less
rich and much less robust.

3.4. Self Referencing

We also saw the power of self-referential systems.  We were bootstrapping
ourselves, using our lab note mechanism to describe our invention of our
lab note mechanism.  It was a bit like writing a C compiler in C, and
finding out that there is only a tiny kernel that you have to write in
assembly language.  In our case, it was more extreme: it was like
inventing a language in the process of writing a compiler in that
language, and thus seeing the limitations of each construction {\it both}
and {\it simultaneously} on the level of what the construction expressed,
and how it was actually implemented.
