2003, December 6, Saturday, Tokyo: Piet

1. Ruby N-body Integrator

Following what Jun and Piet had started the previous day, Piet
produced a working version of nbody_sh1.rb.

The main problem that he encountered was the fact that ruby tends to
regard new arrays as being populated with strings, rather than
floating point numbers.  He managed to convince ruby to do the right
thing by inserting various ".to_f" method calls, but that solution is
far from ideal.

Another problem was that an expression such as <tt>@old_pos = @pos</tt>
did not copy the contents of the array <tt>@pos</tt> to <tt>@oldpos</tt>,
but rather caused the reference <tt>@oldpos</tt> to point to the same
memory location as <tt>@pos</tt>.  As a result, anything added to
<tt>@pos</tt> was added to <tt>@oldpos</tt> as well.  It took a while to
trace this bug, but once found, it was easy to circumvent.  We'll have
to experiment to see what are the best ways of copying arrays.

The nbody_sh1.rb script now produces almost the same output as
nobody_sh1.C; the small differences that show up in less significant
digits after many time steps are probably the result of differences in
roundoff for a slightly different order in which floating point
operations are executed in the two codes, differences that are
subsequently amplified by the large Lyapounov coefficient of
self-gravitating N-body systems.

Timing of both codes showed that nbody_sh1.rb is about 210 times slower
than nbody_sh1.C for a significant number of particles (32 to 64).
Hopefully we can reduce this amount by a more clever type definition
for the arrays.  Other than that, we'll experiment with using a C version
for the most time consuming function.

