= A Complete +Vector+ Class

== Augmenting the +Array+ class

*Carol*: Well, I _may_ have a lead here, to a solution that can make our
scalar-vector multiplication symmetric.  The problem was,
when you have a vector +v+ and you want to write

<tt>3 * v</tt>

you are effectively asking the number 3 to provide a method that
knows how to handle multiplication of 3 with a vector.  But the
poor number 3 has never heard of vectors!  No wonder we got an
error message.  Let me show again explicitly what the error message
says:

 :commandinputoutputnoecho: irb END
require "vector_try.rb"
v = Vector[1, 2, 3]
v * 3
3 * v
quit
END




















<b>[ this is how far I got ; 2007/8/3 -- Piet ]</b>

xxx

And with <tt>euler_modified_vector_try.rb</tt>:

 :inccode: .euler_modified_vector_try.rb

 :commandoutput: ruby euler_modified_vector_try.rb | tail -1

With <tt>euler_modified_vector_try_again.rb</tt>:

 :inccode: .euler_modified_vector_try_again.rb

 :commandoutput: ruby euler_modified_vector_try_again.rb | tail -1

Now with <tt>vector.rb</tt>: 

 :inccode: .vector.rb

And with <tt>euler_modified_vector.rb</tt>:

 :inccode: .euler_modified_vector.rb

 :commandoutput: ruby euler_modified_vector.rb | tail -1

Let integer division give floating point results, where needed










<b>[ this is how far I got ; 2007/8/3 -- Piet ]</b>


