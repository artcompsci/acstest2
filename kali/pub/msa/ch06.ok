= Running the Code

== A Surprise

*Carol*: Well, let's see what happens.  I don't want to look at a thousand
lines of output.  I will first run the code, redirecting the results into
an output file, called <tt>euler.our</tt>:

 :command: cp euler_elliptic.rb euler.rb
 :commandoutput: ruby euler.rb > euler.out

In that way, we can look at our leisure at the beginning and at the
end of the output file, while skipping the 991 lines in between:

 :commandoutput: head -5 euler.out
 :commandoutput: tail -5 euler.out

*Dan*: A lot of numbers.  Now what?  We'd better make a picture of the
results, to see whether these numbers make sense or not.  Let's plot the
orbit.

*Erica*: I agree, we should do that soon.  But hey, the numbers do tell us
something already, namely that there is something seriously wrong!

*Carol*: How can you tell?

*Erica*: At the end of the run, the distance between the two particles
is more than 9.9, almost 10 in our units, as you can see by applying
Pythagoras to the last numbers in the first two columns.

*Dan*: So what?

*Erica*: A bit large already for my taste, but what clinches it is the
velocity difference between the particles, more than 0.99, almost 1.
We started out with a velocity difference of only 0.5, so we have doubled
the velocity, while increasing the distance by a factor 10.  When two
particles move away from each other, they should slow down, not speed up,
because gravity is an attractive force.

*Carol*: I see, yes, that is strange.

*Dan*: Even more reason to make a plot!

*Carol*: How about using <tt>gnuplot</tt>?  That one is present on any
Linux running system, and something that can be easily installed on many
other systems as well.  The style is not particularly pretty, but at
least it will give us something to look at.

*Dan*: How do you invoke <tt>gnuplot</tt>?

*Carol*: To use it is quite simple, with only one command
needed to plot a graph.  In our case, however, I'll start with the
command <tt>set size ratio -1</tt>.  A positive value for the size
ratio scales the aspect ratio of the vertical and horizontal edge of
the box in which a figure appears.  But in our case we want to
set the scales so that the unit has the same length on both the x and
y axes.  Gnuplot can be instructed to do so by specifying the ratio to
be <tt>-1</tt>.  In fact, let me write the line <tt>set size ratio
-1</tt> in a file called <tt>.gnuplot</tt> in my home directory.  That
way we don't have to type it each time we use gnuplot.  Okay, done.

<b>Jun, shall we use the .gnuplot file this way?  It is natural, but it
is far more difficult to make sure that all users will install that on
their system when they copy ACS . . .  Do you have another suggestion?</b>

Now let's have our picture, in fig ref(euler_circular_bug):

 gnuplot
 set size ratio -1
 plot "euler.out"
 quit

# note: it is important to repeat the run command below, to make sure that
#       we have the correct output file, for the html pass and ps pass
#        -- Piet, 2006/4/25
 :command: ruby euler_elliptic.rb > euler.out
 :commandinput: gnuplot END
set term post eps
set output "euler_elliptic_bug.ps"
set size ratio -1
plot "euler.out"
quit
END

:figure: euler_elliptic_bug.ps 10cm euler_elliptic_bug
First attempt at integrating the two-body problem: failure.

== Too Much, Too Soon

*Dan*: Hmmm, that is not what I expected to see.  What a disappointment!

*Erica*: Well, research is like that -- the first time you do something,
it almost never works.  But look, on the bright sight, how well we've done!
The two particles approach each other on a very nice elliptical orbit,
so that part seems to work fine.  It is only around the time of closest
encounter that they seem to get a kick, and fly away from each other.

*Carol*: It's good to know that we seem to have done at least something
right!  But why would the particles get a kick at closest approach?

*Erica*: That's what we have to find out.  And we'd better be systematic.
Even though it <i>seems</i> that the orbit integration goes well for a
while, until the particles come too close, we don't know for sure unless
we check.  It is equally possible that something already starts going
wrong right from the beginning, and that the effects show up only
after a while.

*Dan*: How will we ever find out what is the case?  Shall we look at the
code, line by line, to see whether we made a mistake?  It is such a short
code, there are not that many ways to do something wrong!

*Carol*: That's not the right approach.  By looking at the code you can
perhaps find typos, but if you are starting from the wrong assumptions,
you will never find what is wrong in the code.  If everything in the code
fits with your assumptions, all will seem well . . .

*Dan*: Research <i>is</i> difficult!  If this would be an exercise out
of a book, at least the answer would be in the back, or we could ask a
teaching assistant . . .

*Erica*: Yes, research is difficult, but it also is a lot more fun than
chewing on home work assignments.  You know, when you start playing
in your own way, very soon you start doing things that in that exact
form nobody else has ever done before.  Isn't that a thrill?!

*Dan*: It would be a thrill if we could make progress.  Frankly, I'm lost.

*Carol*: I must admit, I don't see a clear way ahead either, but at least
I remember that one of my teacher told us to `divide and conquer' while
troubleshooting.  In other words, if something goes wrong in a complex
situation, try to simplify everything by dividing whatever procedure you
have applied in smaller, more modular steps.  That way, you can try to
see in which step something goes wrong.

*Erica*: That makes sense.  And I remember hearing a graduate student
tell us, while we were struggling with a computer program: `simplify,
simplify.'  The idea was to first look at the simplest possible parameter
choice, because in simpler cases it is often easier to see what goes wrong.

*Dan*: You mean that we have done too much, too soon, by taking a rather
arbitrary choice of initial conditions, and a thousand steps?

*Erica*: Exactly.  The notion of `divide and conquer' tells us that we'd
better do one integration step at a time, instead of a thousand.  And the
idea of `simplify, simplify' suggests that we start with a circular orbit,
rather than the more general case of an elliptic orbit.

== A Circular Orbit

*Carol*: So we have to find out what the correct velocity is, for two
particles at a distance of 1, in order to move in a circle.  It seems
to be larger than 0.5, but how much larger?

*Dan*: Large enough that the particles don't fall toward each other but
not so large that they start moving away from each other.  I guess that
means that the two forces have to balance each other.  Let me see, what
were they called again?  You know, the force of gravity that pulls them
together and the force of inertia that wants the particles to just fly
apart

*Erica*: You mean centripetal and centrifugal forces, literally center
seeking and center fleeing forces.  Or, instead, we can also just
balance the accelerations, which is simpler.

For the equivalent one-body problem, in our choice of units, the
centripetal acceleration is just the gravitational acceleration,
given in Eq. (ref(Newton2bodysimple)).  Since we are only interested
in the magnitude, we can write the centripetal acceleration as

:equation:
\label{centripetal}
a_{cp} = \frac{1}{r^2}

Now the centrifugal acceleration is simply given by

:equation:
\label{centrifugal}
a_{cf} = \frac{v^2}{r}

*Dan*: What do you mean `simply given', how do you know?

*Erica*: Oh, I just remember, it is one of the standard equations
I learned in classical mechanics.

*Dan*: Well, I don't remember, and while I'm sort-of happy to take your
word for it, I would be much happier to see whether we can derive it,
so that we know for sure we have the right expression.

*Carol*: Me too, I'm with Dan here.

*Erica*: Well, hmmm, I suppose we can go to the library and look it up
in a text book on classical mechanics.  Any textbook should tell you how
to derive that expression.  Frankly, I don't remember now how we did it.

*Dan*: It would be much faster to look it up on Google.  But of course,
then you have to wonder whether it was done correctly or not.

*Carol*: Come on, it can't be <i>that</i> hard.  And it is much more fun
to derive it ourselves rather than look it up.  No Dan, I don't even want
to look at Google.  Here, let's take a piece of paper, and derive both the
first and the second derivatives of the scalar distance <tex>$r$</tex>
between the two particles.  When we force both derivatives to be zero,
we now that <tex>$r$</tex> will remain constant forever, since
equations of motion are second-order differential equations.

*Dan*: Well, before I ask what you mean, let me first see what you do.

== Radial Acceleration

*Carol*: We start with the definition of <tex>$r$</tex> as the absolute
value or, if you like, the length of the vector <tex>$\br$</tex>:

:equation:
r = \left(\br\cdot\br\right)^{1/2}

I will now determine its first time derivative:

:equation:
\label{drdt}
\frac{d}{dt}r =
\half\left(\br\cdot\br\right)^{-1/2}\ \frac{d}{dt}\left(\br\cdot\br\right) =
\half\ \frac{1}{r}\ 2\br\cdot\frac{d}{dt}\br =
\frac{\br\cdot\bv}{r}

On a circular orbit, the distance between the particles is supposed
to remain constant, which means <tex>$dr/dt=0$</tex>, and the only way
to guarantee this, according to the equation I just derived, is to
insist that the vectors <tex>$\br$</tex> and <tex>$\bv$</tex> are
perpendicular, so that <tex>$\br\cdot\bv = 0$</tex>.

*Erica*: That makes sense: on a circular orbit the velocity has no
component in the direction towards the other particle, so it is indeed
perpendicular.

*Dan*: There is something I don't understand.  In the equation above,
you start with the expression <tex>$dr/dt$</tex>.  But isn't that the
velocity?  If you insist that <tex>$dr/dt=0$</tex>, aren't you telling
us that the velocity is zero?  But in that case the two particles would
start falling toward each other, the next moment!

*Carol*: Which they don't.  You are confused with the expression
<tex>$v=|\bv|=|d\br/dt|$</tex> which is the absolute value of the velocity,
and it is a very different beast than what I just wrote down.  So it
is important to realize that, yes, in a one-dimensional situation you
can write

:equation:
\frac{dr}{dt} = v \quad \quad \quad [\ 1D \ ]

but in a two-dimensional or three-dimensional situation this is no longer
true in general; in a typical situation we have

:equation:
\frac{dr}{dt} \neq v \quad \quad \quad [\ kD \ ,\ k > 1\ ]

*Dan*: Hmmm.  Vector analysis is tricky.

*Carol*: Until you get used to it.

*Dan*: Well, that's true for everything.

*Carol*: Fair enough.  Okay, onward to the second derivative of the
separation between the two particles:

:eqnarray:
\label{ddrdtdt}
\frac{d^2}{dt^2}r &=&
\frac{1}{r}\frac{d}{dt}\left(\br\cdot\bv\right) +
\left(\br\cdot\bv\right)\frac{d}{dt}\frac{1}{r}                   \nonumber \\
&=&
\frac{1}{r}\left(\frac{d\br}{dt}\cdot\bv\right) +
\frac{1}{r}\left(\br\cdot\frac{d\bv}{dt}\right) +
\left(\br\cdot\bv\right)\left(-\frac{1}{r^2}\right)\frac{d}{dt}r  \nonumber \\
&=&
\frac{1}{r}\bv\cdot\bv + \frac{1}{r}\br\cdot\ba
- \frac{\left(\br\cdot\bv\right)^2}{r^3}                          \nonumber \\
&=&
\frac{v^2}{r} - a

At the end of the second line I substituted the result of
Eq. (ref(drdt)), and at the end of the third line, I used the fact
that the position and velocity vector are perpendicular to each other,
as we had just derived above.  I also used the fact that the
acceleration vector <tex>$\ba$</tex> points in the opposite direction
of the separation vector <tex>$\br$</tex>, which means that
<tex>$\br\cdot\ba=-ra$</tex>.

For a circular orbit, we must insist that the separation between the 
particles remains constant, also in second order it time, so
<tex>$d^2r/dt^2=0$</tex>.  And there we are, this just means
that:

:equation:
a = \frac{v^2}{r}

*Dan*: Wow, that is exactly the centrifugal acceleration that Erica remembered!

*Erica*: Neat!  Satisfied, Dan?

*Dan*: Sure thing!

*Carol*: Let's see why we did all this.  Ah, we wanted to balance
gravitational and centrifugal accelerations.  We already found that
<tex>$a_{cp} = 1/r^2$</tex>, so this means:

:equation:
\frac{v^2}{r} = \frac{1}{r^2}

or simply:

:equation:
v^2 = \frac{1}{r}

or equivalently

:equation:
v = r^{-1/2}

In our first attempt at orbit integration, we started with an initial
condition <tex>$\br=\{1,0,0\}$</tex> which implies <tex>$r=1$</tex>,
but we used an initial velocity of <tex>$\br=\{0,0.5,0\}$</tex> which
means that <tex>$v=1/4$</tex>, much too small a value for a circular
orbit!  It should have been <tex>$v=1$</tex>, according to what we just
derived.

*Dan*: Ah, so we should have used <tex>$\br=\{0,1,0\}$</tex> for the
initial velocity.  Great!  Good to know.

== 

*Erica*: Which means that we've answered the `simplify, simplify'
part of our task of trouble shooting: we now know how to launch the
two-body problem on the simplest possible orbit, that of a circle.

The other task was `divide and conquer', and we had already decided
to start with just one step.

<b>* * * * * * *  This is how far I got, 2007/4/26  * * * * * * * </b>

